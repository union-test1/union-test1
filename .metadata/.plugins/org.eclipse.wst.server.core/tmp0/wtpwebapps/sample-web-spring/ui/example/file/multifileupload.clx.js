/*
 * App URI: example/file/multifileupload
 * Source Location: example/file/multifileupload.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/file/multifileupload", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			// fileIndex의 rowId를 설정합니다.
			var rowId = 1;
			
			//파일 객체들이 저장되는 공간입니다.
			var fileStorage = {};
			
			/**
			 * fileIndex 값을 설정합니다.
			 * @return rowId
			 * */
			function newFileIndex() {
				return "" + (rowId++);
			}
			
			/*
			 * "조회" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var subList = app.lookup("sub_list");
				
				// 데이터를 전송합니다. 동일한 서브미션으로 전송 중인 경우 실행되지 않습니다.
				subList.send();
			}
			
			/*
			 * "신규" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd1 = app.lookup("grd1");
				
				// 현재 선택된 row index를 반환합니다.
				// 선택된 Row가 없을 경우 -1을 반환합니다.
				var rowIndex = grd1.getSelectedRowIndex();
				if(rowIndex == -1) {
					// 선택된 Row가 없을 경우 첫번째 Row가 선택됩니다.
					rowIndex = 0;
				}
				
				// 그리드에 신규 Row를 추가합니다.
				var gridRow = grd1.insertRow(rowIndex, true);
				rowIndex = gridRow.getIndex();
				
				// row를 선택합니다.
				grd1.selectRows([rowIndex]);
			}
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd1 = app.lookup("grd1");
				
				// 현재 선택된 row index를 반환합니다.
				var indices = grd1.getSelectedRowIndices();
				
				// Row를 삭제합니다.
				grd1.deleteRow(indices);
			}
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var dsMain = app.lookup("ds_main");
				var subSave = app.lookup("sub_save");
				
				// UPDATED : 행이 수정된 상태
				// INSERTED : 행이 신규로 추가된 상태
				var selectState = cpr.data.tabledata.RowState.UPDATED | cpr.data.tabledata.RowState.INSERTED;
				
				// 상태 값을 갖는 row를 검색하여 row index 배열을 반환합니다.
				var rowIndexs = dsMain.getRowStatedIndices(selectState);
				rowIndexs.forEach(function(rowIndex) {
					
					// rowIndex에 해당하는 row index의 객체를 반환합니다.
					var row = dsMain.getRow(rowIndex);
					
					// fileIndex에 해당하는 파일 객체입니다.
					var fileIndex = row.getAttr("fileIndex");
					if(fileIndex != null) {
						
						// 컬럼명 "column1" 해당하는 값을 반환합니다.
						var column1 = row.getValue("column1");
						
						// fileIndex에 해당하는 파일 객체입니다.
						var file = fileStorage[fileIndex];
						if(file != null) {
							
							// 전송 시 추가로 전달되는 파라미터에 파일을 추가합니다.
							subSave.addFileParameter("f@" + column1, file);
						}
					}
				});
				
				// 데이터를 전송합니다. 이미 동일한 서브미션으로 전송 중인 경우 실행되지 않습니다.
				subSave.send();
			}
			
			/*
			 * "초기화" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var dsMain = app.lookup("ds_main");
				// 모든 데이터셋 정보를 제거합니다.
				dsMain.clear();
				
				// onSub_listSubmitSuccess Function을 호출합니다.
				onSub_listSubmitSuccess();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_listSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				// 그리드 컨트롤을 다시 그립니다.
				app.lookup("grd1").redraw();
				
				// rowId, fileStorage를 초기화합니다.
				rowId = 1;
				fileStorage = {};
			}
			
			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFileInputValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.FileInput
				 */
				var fileInput = e.control;
				
				// 선택된 파일을 반환합니다.
				var fileObj = fileInput.file;
				var grd1 = app.lookup("grd1");
				
				// 현재 그리드에 편집모드 행의 Index를 반환합니다.
				var rowIndex = grd1.getEditRowIndex();
				var dsMain = app.lookup("ds_main");
				
				// row index의 Row객체를 반환합니다.
				var row = dsMain.getRow(rowIndex);
				
				// 현재 row의 "fileIndex" 속성값을 반환합니다.
				var fileIndex = row.getAttr("fileIndex");
				if(fileIndex == null) {
					
					// fileIndex 값을 설정합니다.
					fileIndex = newFileIndex();
					
					// "fileIndex"의 속성을 fileIndex 값으로 설정합니다.
					row.setAttr("fileIndex", fileIndex);
				}
				
				// 전역변수 fileStorage에 선택된 file 객체를  저장합니다.
				fileStorage[fileIndex] = fileObj;
			}
			
			/*
			 * "Button" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtn_filedownClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var btn_filedown = e.control;
				
				var ds_main = app.lookup("ds_main")
				var grid = app.lookup("grd1");
				var select = grid.getSelectedRowIndices();
				var row = grid.getRow(select[0]);
				var pk = row.getValue("column1");
			
				if(ds_main.isModified()){
					alert("저장 후 다운로드가 가능합니다.");
					return;
				}	
			
				if (pk) {
					app.lookup("dm_check_file").setValue("file_key", pk);
					app.lookup("sms_check_file").send();
			
				}
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSms_check_fileSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_check_file = e.control;
				
				var dmCheckFile = app.lookup("dm_check_file");
				var hasFile = dmCheckFile.getValue("has_file");
				var fileKey = dmCheckFile.getValue("file_key");
				if (hasFile == "true") {
					var sms = app.lookup("sms_download");
					sms.addParameter("prefix", "f@");
					sms.addParameter("filekey", fileKey);
					sms.send();
				}
			}
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSms_downloadSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sms_download = e.control;
				sms_download.removeAllParameters();
			}
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onSub_saveSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sub_save = e.control;
				
				// 파일로 등록된 파라미터들을 모두 제거합니다.
				sub_save.removeAllFileParameters();
				
				// 직전 서브미션의 결과 서버로부터 전달받은 메타데이터의 값을 반환합니다.
				var message = sub_save.getMetadata("message");
				alert(message);
			}
			
			
			/*
			 * 서브미션에서 submit-error 이벤트 발생 시 호출.
			 * 통신 중 문제가 생기면 발생합니다.
			 */
			function onSub_saveSubmitError(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var sub_save = e.control;
				
				alert(e);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("title", null);
			app.declareAppProperty("explain", null);
			var dataSet_1 = new cpr.data.DataSet("ds_main");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dm_check_file");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "file_key",
						"dataType": "string"
					},
					{
						"name": "has_file",
						"dataType": "string"
					},
					{"name": "file_real_name"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("sub_list");
			submission_1.method = "get";
			submission_1.action = "../example/crud/list.do";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSub_listSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSub_listSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sub_save");
			submission_2.action = "../example/crud/save.do";
			submission_2.addRequestData(dataSet_1);
			submission_2.addResponseData(dataSet_1, false);
			if(typeof onSub_listSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSub_listSubmitSuccess);
			}
			if(typeof onSub_saveSubmitDone == "function") {
				submission_2.addEventListener("submit-done", onSub_saveSubmitDone);
			}
			if(typeof onSub_saveSubmitError == "function") {
				submission_2.addEventListener("submit-error", onSub_saveSubmitError);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sms_check_file");
			submission_3.action = "../example/crud/checkfile.do";
			submission_3.addRequestData(dataMap_1);
			submission_3.addResponseData(dataMap_1, false);
			if(typeof onSms_check_fileSubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onSms_check_fileSubmitSuccess);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sms_download");
			submission_4.action = "../example/crud/file.do";
			submission_4.mediaType = "application/x-www-form-urlencoded";
			submission_4.responseType = "filedownload";
			if(typeof onSms_downloadSubmitDone == "function") {
				submission_4.addEventListener("submit-done", onSms_downloadSubmitDone);
			}
			app.register(submission_4);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds_main"),
				"bufferedScroll": true,
				"clickMode": "edit",
				"columns": [
					{"width": "43px"},
					{"width": "120px"},
					{"width": "120px"},
					{"width": "120px"},
					{"width": "300px"}
				],
				"header": {
					"rows": [
						{"height": "24px"},
						{"height": "24px"}
					],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.text = "컬럼1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.text = "컬럼2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.text = "컬럼3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.text = "컬럼4";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 1, "rowSpan": 1, "colSpan": 4},
							"configurator": function(cell){
								cell.text = "컬럼5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 0, "rowSpan": 2, "colSpan": 1},
							"configurator": function(cell){
								cell.text = "No.";
							}
						}
					]
				},
				"detail": {
					"rows": [
						{"height": "24px"},
						{"height": "24px"}
					],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column1";
								cell.control = (function(){
									var inputBox_1 = new cpr.controls.InputBox("ipb1");
									inputBox_1.bind("value").toDataColumn("column1");
									return inputBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column2";
								cell.control = (function(){
									var inputBox_2 = new cpr.controls.InputBox("ipb2");
									inputBox_2.bind("value").toDataColumn("column2");
									return inputBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column3";
								cell.control = (function(){
									var dateInput_1 = new cpr.controls.DateInput("dti1");
									dateInput_1.bind("value").toDataColumn("column3");
									return dateInput_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4, "rowSpan": 2, "colSpan": 1},
							"configurator": function(cell){
								cell.columnName = "column4";
								cell.control = (function(){
									var textArea_1 = new cpr.controls.TextArea("txa1");
									textArea_1.style.css({
										"padding-top" : "5px",
										"padding-left" : "5px",
										"padding-bottom" : "5px",
										"padding-right" : "5px"
									});
									textArea_1.bind("value").toDataColumn("column4");
									return textArea_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 2, "rowSpan": 1, "colSpan": 2},
							"configurator": function(cell){
								cell.columnName = "column5";
								cell.control = (function(){
									var fileInput_1 = new cpr.controls.FileInput("fileInput");
									fileInput_1.style.css({
										"text-align" : "left"
									});
									if(typeof onFileInputValueChange == "function") {
										fileInput_1.addEventListener("value-change", onFileInputValueChange);
									}
									fileInput_1.bind("value").toDataColumn("column5");
									return fileInput_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 0, "rowSpan": 2, "colSpan": 1},
							"configurator": function(cell){
								cell.columnType = "rowindex";
							}
						},
						{
							"constraint": {"rowIndex": 1, "colIndex": 1},
							"configurator": function(cell){
								cell.control = (function(){
									var button_1 = new cpr.controls.Button("btn_filedown");
									button_1.value = "파일다운로드";
									if(typeof onBtn_filedownClick == "function") {
										button_1.addEventListener("click", onBtn_filedownClick);
									}
									return button_1;
								})();
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "100px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "초기화";
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				"top": "70px",
				"right": "10px",
				"width": "70px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "저장";
			if(typeof onButtonClick5 == "function") {
				button_3.addEventListener("click", onButtonClick5);
			}
			container.addChild(button_3, {
				"top": "70px",
				"right": "90px",
				"width": "70px",
				"height": "20px"
			});
			
			var button_4 = new cpr.controls.Button();
			button_4.value = "조회";
			if(typeof onButtonClick2 == "function") {
				button_4.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_4, {
				"top": "70px",
				"right": "330px",
				"width": "70px",
				"height": "20px"
			});
			
			var button_5 = new cpr.controls.Button();
			button_5.value = "신규";
			if(typeof onButtonClick3 == "function") {
				button_5.addEventListener("click", onButtonClick3);
			}
			container.addChild(button_5, {
				"top": "70px",
				"right": "250px",
				"width": "70px",
				"height": "20px"
			});
			
			var button_6 = new cpr.controls.Button();
			button_6.value = "삭제";
			if(typeof onButtonClick4 == "function") {
				button_6.addEventListener("click", onButtonClick4);
			}
			container.addChild(button_6, {
				"top": "70px",
				"right": "170px",
				"width": "70px",
				"height": "20px"
			});
			
			var userDefinedControl_1 = new udc.pagetitle2();
			userDefinedControl_1.bind("title").toAppProperty("title");
			userDefinedControl_1.bind("explain").toAppProperty("explain");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "50px"
			});
		}
	});
	app.title = "그리드파일업로드";
	cpr.core.Platform.INSTANCE.register(app);
})();
