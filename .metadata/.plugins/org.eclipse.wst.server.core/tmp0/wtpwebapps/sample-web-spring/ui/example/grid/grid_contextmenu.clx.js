/*
 * App URI: example/grid/grid_contextmenu
 * Source Location: example/grid/grid_contextmenu.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/grid/grid_contextmenu", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			// 조회 후 이동할 Row의 조건을 저장하기 위한 전역변수
			var focusCondition = null;
			
			/**
			 * 화면 검색 Function
			 * */
			function doSearch() {
				var grd = app.lookup("grdMain");
				
				// 그리드가 현재 편집 중인지 여부를 반환합니다.
				if (grd.isEditing()) {
					return ;
				}
				
				// 현재 연결된 데이터 구조체에 설정된 filter 조건식을 반환합니다.
				if(grd.getFilter()){
					// 적용된 filter를 제거합니다.
					grd.clearFilter();
				}
				
				// 조회 Submission send
				app.lookup("subMainList").send();
			}
			
			/**
			 * 메인 저장 Function
			 * */
			function doSave() {
				var ds = app.lookup("resList");
				// 데이터셋 변경 유무를 반환합니다. (inserted, deleted, updated 상태인 row가 존재하는지 유무)
				if(ds.isModified() == false){
					// 서버 메세지를 발송합니다.
					cpr.core.NotificationCenter.INSTANCE.post("notice", "변경된 정보가 없습니다.");
					return;
				}
			
				var grd = app.lookup("grdMain");
				// 그리드가 현재 편집 중인지 여부를 반환합니다.
				if (grd.isEditing()) {
					cpr.core.NotificationCenter.INSTANCE.post("notice", "편집 중인 데이터가 있습니다.");
					return ;
				}
			
				// 저장 전에 상태가 변경된 row의 값을 저장
				var resList = app.lookup("resList");
				var rowIndex = resList.getRowStatedIndex(cpr.data.tabledata.RowState.UPDATED | cpr.data.tabledata.RowState.INSERTED);
				if (rowIndex == -1) {
					focusCondition = null;
				} else {
					// Row를 식별할 수 있는 조건을 기록함.
					focusCondition = "column1 == '" + resList.getValue(rowIndex, "column1") + "'";
				}
			
				// 저장 Submission send
				app.lookup("subSave").send();
			}
			
			
			/**
			 * contextmenu 생성
			 * @return menu
			 * */
			function createContextMenu() {
				// 메뉴 컨트롤 동적 생성
				var menu = new cpr.controls.Menu("ctxmenu");
				
				// blur이벤트 핸들러 입니다.
				menu.addEventListener("blur", function() {
					// 컨트롤에 포함되어 있는 객체들을 제거합니다.
					menu.dispose();
				});
				
				// selection-change이벤트 핸들러 입니다.
				menu.addEventListener("selection-change", function(/* cpr.events.CSelectionEvent */e) {
					// 컨트롤에 포함되어 있는 객체들을 제거합니다.
					menu.dispose();
					
					// 새롭게 선택된 아이템
					var newSelect = e.newSelection[0];
					var grd = app.lookup("grdMain")
					var grdSelectionRow = grd.getSelectedRowIndices()[0];
					var dm = app.lookup("reqKey");
					// 데이터맵의 컬럼명을 배열형식으로 반환합니다.
					var initValue = dm.getColumnNames();
					
					// "추가" 아이템 선택 시
					if (newSelect.label == "추가") {
						// 그리드에 신규 Row를 추가합니다.
						grd.insertRow(grdSelectionRow, true);
					}
					// "수정" 아이템 선택 시
					else if (newSelect.label == "수정") {
						// 전달된 행을 편집모드로 전환합니다.
						grd.setEditRowIndex(grdSelectionRow, true);
					}
					// "삭제" 아이템 선택 시
					else if (newSelect.label == "삭제") {
						// 그리드의 선택된 Row를 삭제합니다.
						grd.deleteRow(grdSelectionRow);
					}
					// "소트" 아이템 선택 시
					else if (newSelect.label == "소트") {
						// 다이얼로그 스타일
						var dialogProp = {
								width : 500,
								height : 300,
								headerVisible : true,
								headerClose : true,
								resizable : true
							};
						
						// 다이얼로그 sort핸들러 입니다.
						function sortHandler(/* cpr.events.CUIEvent */e){
							var dialog = e.control;
							// 다이얼로그의 returnValue를 반환합니다.
							var returnValue = dialog.returnValue;
							if (returnValue == null) {
								return;
							}
							
							var sortCondition = "";
							for(var i=0; i<returnValue.length; i++){
								if(returnValue[i] != null){
									sortCondition += returnValue[i] + ",";
								}
							}
							sortCondition = sortCondition.substring(0, sortCondition.length-1);
							// 현재 연결된 구조체에 sort 조건을 변경하고, sort 합니다.
							grd.sort(sortCondition);
						}
						
						// 앱에 Dialog를 open 합니다.
						app.openDialog("example/grid/popup/grid_contextmenu_sortpop", dialogProp, function(/* cpr.controls.Dialog */dialog){
							
							if (sortHandler) {
								// 앱이 "close"할 때 발생하는 이벤트 핸들러입니다.
								dialog.addEventListenerOnce("close", sortHandler);
							}
							if (initValue) {
								// 다이얼로그의 initValue를 설정합니다.
								dialog.initValue = initValue;
								if (initValue["headerTitle"]) {
									dialog.headerTitle = initValue["headerTitle"];
								}
							}
							
						});
						
					}else {
						
						// 다이얼로그 스타일
						var dialogProp = {
								width : 700,
								height : 300,
								headerVisible : true,
								headerClose : true,
								resizable : true
							};
						
						// 다이얼로그 filter핸들러 입니다.
						function filterHandler(/* cpr.events.CUIEvent */e){
							var dialog = e.control;
							// 다이얼로그의 returnValue를 반환합니다.
							var returnValue = dialog.returnValue;
							if (returnValue == null) {
								return;
							}
							
							if (returnValue != "") {
								// 현재 연결된 데이터 구조체에 filter 조건을 변경하고, filter 합니다.
								grd.filter(returnValue);
							}
						}
						
						// 앱에 Dialog를 open 합니다.
						app.openDialog("example/grid/popup/grid_contextmenu_filterpop", dialogProp, function(/* cpr.controls.Dialog */dialog){
							
							if (filterHandler) {
								// 앱이 "close"할 때 발생하는 이벤트 핸들러입니다.
								dialog.addEventListenerOnce("close", filterHandler);
							}
							if (initValue) {
								// 다이얼로그의 initValue를 설정합니다.
								dialog.initValue = initValue;
								if (initValue["headerTitle"]) {
									dialog.headerTitle = initValue["headerTitle"];
								}
							}
							
						});
						
					}
				});
				
				// contextmenu 아이템 입니다.
				(function(ctxmenu) {
					ctxmenu.addItem(new cpr.controls.MenuItem("추가", "value1", "root"));
					ctxmenu.addItem(new cpr.controls.MenuItem("수정", "value2", "root"));
					ctxmenu.addItem(new cpr.controls.MenuItem("삭제", "value3", "root"));
					ctxmenu.addItem(new cpr.controls.MenuItem("소트", "value4", "root"));
					ctxmenu.addItem(new cpr.controls.MenuItem("필터", "value5", "root"));
				})(menu);
				return menu;
			}
			
			/*
			 * "검색" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				// 화면 조회
				doSearch();
			}
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				// 목록 저장
				doSave();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출. 통신이 성공하면 발생합니다.
			 */
			function onSubMainListSubmitSuccess(/* cpr.events.CSubmissionEvent */e) {
				/**
				 * @type cpr.protocols.Submission
				 */
				var subMainList = e.control;
			
				// 서버로부터 전달된 메시지가 있을 경우 메시지를 출력
				var message = subMainList.getMetadata("msg");
				if (message) {
					cpr.core.NotificationCenter.INSTANCE.post("notice", message);
				}
			
				// 메인 그리드를 redraw
				var grdMain = app.lookup("grdMain");
				grdMain.redraw();
			
				// 조회 완료 후 저장된 값을 가지는 Row로 포커스 이동
				if (focusCondition) {
					var grid = app.lookup("grdMain");
					// 조건에 맞는 첫 번째 Row를 찾아 해당 GridRow를 반환합니다.
					var gridRow = grid.findFirstRow(focusCondition);
					if (gridRow) {
						// 사용자가 전달한 정보의 cell에 포커스를 줍니다.
						grid.focusCell(gridRow.getIndex(), 1);
					}
					focusCondition = null;
				}
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출. 통신이 성공하면 발생합니다.
			 */
			function onSubSaveSubmitSuccess(/* cpr.events.CSubmissionEvent */e) {
				/**
				 * @type cpr.protocols.Submission
				 */
				var subSave = e.control;
			
				// 서버로부터 전달된 메시지가 있을 경우 메시지를 출력
				var message = subSave.getMetadata("msg");
				if (message) {
					cpr.core.NotificationCenter.INSTANCE.post("notice", message);
				}
			
				// 화면 재조회
				doSearch();
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출. 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrp_search_condKeydown(/* cpr.events.CKeyboardEvent */e) {
				/**
				 * @type cpr.controls.Container
				 */
				var grp_search_cond = e.control;
			
				// 검색부에서 Enter Key가 입력되면 자동 조회
				if (e.keyCode == cpr.events.KeyCode.ENTER) {
					// 화면 조회
					doSearch();
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 insert 이벤트 발생 시 호출.
			 */
			function onButton_gridInsert(/* cpr.events.CUIEvent */e) {
				/**
				 * @type udc.com.button_grid
				 */
				var button_grid = e.control;
			
				var grd = app.lookup("grdMain");
				// 그리드가 현재 편집 중인지 여부를 반환합니다.
				if (grd.isEditing()) {
					if (grd.isEditing() == true) {
						var success = grd.setEditRowIndex(-1, true);
						if (success == false) {
							return -1;
						}
					}
				}
				
				// 선택된 row index를 반한합니다.
				var rowIndex = grd.getSelectedRowIndex();
				
				// 그리드에 신규 Row를 추가합니다.
				var gridRow = grd.insertRow(rowIndex, true);
				rowIndex = gridRow.getIndex();
				
				// rowIndex를 선택합니다.
				grd.selectRows([ rowIndex ]);
			
				// Grid가 readonly가 아닐 경우 edit mode로 전환
				if (grd.readOnly == false) {
					var changed = grd.setEditRowIndex(rowIndex, true);
				}
				
				// 입력 가능한 첫 번째 셀에 포커스
				grd.focusCell(rowIndex, 1);
			}
			
			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onButton_gridDelete(/* cpr.events.CUIEvent */e) {
				/**
				 * @type udc.com.button_grid
				 */
				var button_grid = e.control;
			
				// 그리드 선택된 row 삭제
				var grd = app.lookup("grdMain");
				// 선택된 그리드 row
				var rowIndex = grd.getSelectedRowIndex();
				
				if (rowIndex == -1) {
					//선택된 row 없을 때 notice
					cpr.core.NotificationCenter.INSTANCE.post("notice", "선택된 Row가 없습니다.");
				} else {
					// 그리드 선택된 로우 삭제
					grd.deleteRow(rowIndex);
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 reset 이벤트 발생 시 호출.
			 */
			function onButton_gridReset(/* cpr.events.CUIEvent */e) {
				/**
				 * @type udc.com.button_grid
				 */
				var button_grid = e.control;
			
				// 그리드 선택된 row undo
				var grd = app.lookup("grdMain");
				// 그리드 선택된 row
				var rowIndices = grd.getSelectedRowIndices();
				// 그리드 바인딩 dataSet
				var dataSet = grd.dataSet;
			
				if (rowIndices.length == 0) {
					cpr.core.NotificationCenter.INSTANCE.post("notice", "선택된 Row가 없습니다.");
				} else {
					// 그리드 바인딩 된 dataSet reset
					rowIndices.forEach(function(rowIndex) {
						dataSet.revertRow(rowIndex);
					});
					// 그리드 다시 구성
					grd.redraw();
				}
			}
			
			
			
			// UDC를 parent에 붙이지 않으면 root app에 붙어져 그려짐. TODO 개선
			var gridctxmenu = null;
			
			/*
			 * 그리드에서 contextmenu 이벤트 발생 시 호출. 마우스의 오른쪽 버튼이 클릭되거나 컨텍스트 메뉴 키가 눌려지면 호출되는 이벤트.
			 */
			function onGrdMainContextmenu(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Grid
				 */
				var grdMain = e.control;
				
				// 마우스를 눌렀을 때 이벤트를 트리거 한 버튼을 나타냅니다.
				// no button = 0, left button = 1,
				// middle button = 2, right button = 3
				if (e.which !== 3) {
					alert(e.which);
					return;
				}
				
				// 다음 기본 동작을 방지합니다.
				e.preventDefault();
				
				// 캡처 및 버블링 단계에서 현재 이벤트의 추가 전파를 방지합니다.
				e.stopPropagation(true);
			
				if (gridctxmenu) {
					// 앱에 띄워져 있는 gridctxmenu를 제거합니다.
					app.removeFloatingControl(gridctxmenu, false);
				}
			
				// 앱이 실제 그려진 사이즈를 반환합니다. 화면에 그려지지 않은 상태인 경우는 모든 값이 0인 객체가 반환됩니다.
				var appRect = app.getActualRect();
			
				gridctxmenu = createContextMenu();
				gridctxmenu.style.css({
					position : "absolute",
					top : "" + (e.clientY - appRect.top) + "px",
					left : "" + (e.clientX - appRect.left) + "px",
					width : "150px"
				});
				// 앱 내부 특정 위치에 컨트롤을 위치시킵니다.
				app.floatControl(gridctxmenu);
				
				// gridctxmenu에 포커스 설정합니다
				gridctxmenu.focus();
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			app.declareBindableAppProperty("explain", null);
			var dataSet_1 = new cpr.data.DataSet("resList");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("reqKey");
			dataMap_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subMainList");
			submission_1.action = "../example/accesskeybutton/getMainList.do";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubMainListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubMainListSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subSave");
			submission_2.action = "../example/accesskeybutton/save.do";
			submission_2.addRequestData(dataSet_1);
			if(typeof onSubSaveSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSubSaveSubmitSuccess);
			}
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "main");
			app.supportMedia("all and (max-width: 1023px)", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["100px", "1fr", "11px", "40px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grp_search_cond");
				group_2.style.setClasses(["grp-search"]);
				var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
				group_2.setBindContext(dataMapContext_1);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.setColumns(["70px", "130px", "70px", "130px", "70px", "130px", "1fr", "90px"]);
				formLayout_2.setRows(["1fr", "1fr", "1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "column1";
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "column2";
					container.addChild(output_2, {
						"colIndex": 2,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "column3";
					container.addChild(output_3, {
						"colIndex": 4,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "column4";
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "column5";
					container.addChild(output_5, {
						"colIndex": 2,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_6 = new cpr.controls.Output();
					output_6.value = "column6";
					container.addChild(output_6, {
						"colIndex": 4,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_7 = new cpr.controls.Output();
					output_7.value = "column7";
					container.addChild(output_7, {
						"colIndex": 0,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_8 = new cpr.controls.Output();
					output_8.value = "column8";
					container.addChild(output_8, {
						"colIndex": 2,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_9 = new cpr.controls.Output();
					output_9.value = "column9";
					container.addChild(output_9, {
						"colIndex": 4,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipb1");
					inputBox_1.userAttr({"name": "컬럼1"});
					var dataMapContext_2 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
					inputBox_1.setBindContext(dataMapContext_2);
					inputBox_1.bind("value").toDataColumn("column1");
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_2 = new cpr.controls.InputBox("ipb2");
					var dataMapContext_3 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
					inputBox_2.setBindContext(dataMapContext_3);
					inputBox_2.bind("value").toDataColumn("column2");
					container.addChild(inputBox_2, {
						"colIndex": 3,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_3 = new cpr.controls.InputBox("ipb3");
					var dataMapContext_4 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
					inputBox_3.setBindContext(dataMapContext_4);
					inputBox_3.bind("value").toDataColumn("column3");
					container.addChild(inputBox_3, {
						"colIndex": 5,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_4 = new cpr.controls.InputBox("ipb4");
					inputBox_4.bind("value").toDataColumn("column4");
					container.addChild(inputBox_4, {
						"colIndex": 1,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_5 = new cpr.controls.InputBox("ipb5");
					inputBox_5.bind("value").toDataColumn("column5");
					container.addChild(inputBox_5, {
						"colIndex": 3,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_6 = new cpr.controls.InputBox("ipb6");
					inputBox_6.bind("value").toDataColumn("column6");
					container.addChild(inputBox_6, {
						"colIndex": 5,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_7 = new cpr.controls.InputBox("ipb7");
					inputBox_7.bind("value").toDataColumn("column7");
					container.addChild(inputBox_7, {
						"colIndex": 1,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_8 = new cpr.controls.InputBox("ipb8");
					inputBox_8.bind("value").toDataColumn("column8");
					container.addChild(inputBox_8, {
						"colIndex": 3,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_9 = new cpr.controls.InputBox("ipb9");
					inputBox_9.bind("value").toDataColumn("column9");
					container.addChild(inputBox_9, {
						"colIndex": 5,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "검색";
					button_1.htmlAttr({
						"required": "true",
						"type": "button"
					});
					if(typeof onButtonClick == "function") {
						button_1.addEventListener("click", onButtonClick);
					}
					container.addChild(button_1, {
						"colIndex": 7,
						"rowIndex": 2,
						"verticalAlign": "fill"
					});
				})(group_2);
				if(typeof onGrp_search_condKeydown == "function") {
					group_2.addEventListener("keydown", onGrp_search_condKeydown);
				}
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var grid_1 = new cpr.controls.Grid("grdMain");
				grid_1.init({
					"dataSet": app.lookup("resList"),
					"columnMovable": true,
					"columnResizable": true,
					"noDataMessage": "조회된 데이터가 없습니다.",
					"columns": [
						{"width": "60px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "column1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "column2";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "column3";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.text = "column4";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.text = "column5";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.text = "column6";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.text = "column7";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "column8";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.text = "column9";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.text = "column10";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "column1";
									cell.style.setClasses(["required"]);
									cell.control = (function(){
										var inputBox_10 = new cpr.controls.InputBox("ipb10");
										inputBox_10.autoSelect = true;
										inputBox_10.style.bindClass().toExpression("getStateString() *= \"I\" ? \"required\" : \"\"");
										inputBox_10.bind("enabled").toExpression("getStateString() *= \"I\"");
										inputBox_10.bind("value").toDataColumn("column1");
										return inputBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "column2";
									cell.control = (function(){
										var inputBox_11 = new cpr.controls.InputBox("ipb11");
										inputBox_11.autoSelect = true;
										inputBox_11.bind("value").toDataColumn("column2");
										return inputBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "column3";
									cell.control = (function(){
										var inputBox_12 = new cpr.controls.InputBox("ipb12");
										inputBox_12.autoSelect = true;
										inputBox_12.bind("value").toDataColumn("column3");
										return inputBox_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "column4";
									cell.control = (function(){
										var inputBox_13 = new cpr.controls.InputBox("ipb13");
										inputBox_13.autoSelect = true;
										inputBox_13.bind("value").toDataColumn("column4");
										return inputBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "column5";
									cell.control = (function(){
										var inputBox_14 = new cpr.controls.InputBox("ipb14");
										inputBox_14.autoSelect = true;
										inputBox_14.bind("value").toDataColumn("column5");
										return inputBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "column6";
									cell.control = (function(){
										var inputBox_15 = new cpr.controls.InputBox("ipb15");
										inputBox_15.autoSelect = true;
										inputBox_15.bind("value").toDataColumn("column6");
										return inputBox_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "column7";
									cell.control = (function(){
										var inputBox_16 = new cpr.controls.InputBox("ipb16");
										inputBox_16.autoSelect = true;
										inputBox_16.bind("value").toDataColumn("column7");
										return inputBox_16;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "column8";
									cell.control = (function(){
										var inputBox_17 = new cpr.controls.InputBox("ipb17");
										inputBox_17.autoSelect = true;
										inputBox_17.bind("value").toDataColumn("column8");
										return inputBox_17;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "column9";
									cell.control = (function(){
										var inputBox_18 = new cpr.controls.InputBox("ipb18");
										inputBox_18.autoSelect = true;
										inputBox_18.bind("value").toDataColumn("column9");
										return inputBox_18;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "column10";
									cell.control = (function(){
										var inputBox_19 = new cpr.controls.InputBox("ipb19");
										inputBox_19.autoSelect = true;
										inputBox_19.bind("value").toDataColumn("column10");
										return inputBox_19;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							}
						]
					}
				});
				if(typeof onGrdMainContextmenu == "function") {
					grid_1.addEventListener("contextmenu", onGrdMainContextmenu);
				}
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var group_3 = new cpr.controls.Container();
				group_3.style.setClasses(["grp-buttons"]);
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.setColumns(["1fr", "90px"]);
				formLayout_3.setRows(["1fr"]);
				group_3.setLayout(formLayout_3);
				(function(container){
					var button_2 = new cpr.controls.Button();
					button_2.value = "저장";
					button_2.style.setClasses(["cl-button-box"]);
					if(typeof onButtonClick3 == "function") {
						button_2.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_2, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 0,
					"rowIndex": 3
				});
				var userDefinedControl_1 = new udc.button_grid();
				if(typeof onButton_gridInsert == "function") {
					userDefinedControl_1.addEventListener("insert", onButton_gridInsert);
				}
				if(typeof onButton_gridDelete == "function") {
					userDefinedControl_1.addEventListener("delete", onButton_gridDelete);
				}
				if(typeof onButton_gridReset == "function") {
					userDefinedControl_1.addEventListener("reset", onButton_gridReset);
				}
				container.addChild(userDefinedControl_1, {
					"colIndex": 0,
					"rowIndex": 2,
					"horizontalAlign": "right"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "70px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
			
			var userDefinedControl_2 = new udc.pagetitle2();
			userDefinedControl_2.bind("title").toAppProperty("title");
			userDefinedControl_2.bind("explain").toAppProperty("explain");
			container.addChild(userDefinedControl_2, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "50px"
			});
		}
	});
	app.title = "grid_contextmenu";
	cpr.core.Platform.INSTANCE.register(app);
})();
