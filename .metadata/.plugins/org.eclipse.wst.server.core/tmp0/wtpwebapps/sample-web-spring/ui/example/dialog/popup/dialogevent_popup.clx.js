/*
 * App URI: example/dialog/popup/dialogevent_popup
 * Source Location: example/dialog/popup/dialogevent_popup.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/dialog/popup/dialogevent_popup", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * dialogevent_popup.js
			 * Created at 2018. 8. 27. 오전 10:39:37.
			 *
			 * @author hyeran
			 ************************************************/
			
			
			/*
			 * Body에서 before-unload 이벤트 발생 시 호출.
			 * 앱이 언로드되기 전에 발생하는 이벤트 입니다. 취소할 수 있습니다.
			 */
			function onBodyBeforeUnload(/* cpr.events.CEvent */ e){
					var dialog = app.getHost();
				if (dialog && dialog.returnValue == null) {
					dialog.returnValue = "default";
				}
				console.log("before-unload");
			}
			
			
			/*
			 * "확인 반환 : confirm" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log("확인 닫기");
				
				app.close("confirm");
			}
			
			
			/*
			 * "취소
			
			반환 : cancel" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				console.log("취소 닫기");
				
				app.close("cancel");
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output();
			output_1.value = "미 설정시 반환값 : default";
			container.addChild(output_1, {
				"top": "20px",
				"right": "20px",
				"left": "20px",
				"height": "30px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "확인\r\n\r\n반환 : confirm";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "70px",
				"bottom": "20px",
				"left": "20px",
				"width": "100px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "취소\r\n\r\n반환 : cancel";
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "70px",
				"right": "20px",
				"bottom": "20px",
				"width": "100px"
			});
			if(typeof onBodyBeforeUnload == "function"){
				app.addEventListener("before-unload", onBodyBeforeUnload);
			}
		}
	});
	app.title = "dialogevent_popup";
	cpr.core.Platform.INSTANCE.register(app);
})();
