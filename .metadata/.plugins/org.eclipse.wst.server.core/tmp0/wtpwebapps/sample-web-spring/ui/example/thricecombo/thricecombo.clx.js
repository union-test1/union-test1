/*
 * App URI: example/thricecombo/thricecombo
 * Source Location: example/thricecombo/thricecombo.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/thricecombo/thricecombo", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * Body에서 init 이벤트 발생 시 호출. 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */e) {
				// 콤보박스의 데이터셋 Submission send
				app.lookup("subDeptList").send();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출. 통신이 성공하면 발생합니다.
			 */
			function onSubDeptListSubmitSuccess(/* cpr.events.CSubmissionEvent */e) {
			
				var cmb1 = app.lookup("cmb1");
				var cmb2 = app.lookup("cmb2");
				var cmb3 = app.lookup("cmb3");
			
				// 콤보박스에 filter(regex)를 설정
				cmb1.setFilter("parent == \"00000\"");
				cmb2.setFilter("parent == \"" + cmb1.value + "\"");
				cmb3.setFilter("parent == \"" + cmb2.value + "\"");
			
				app.lookup("grp").redraw();
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출. ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb1SelectionChange(/* cpr.events.CSelectionEvent */e) {
				/**
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
			
				var cmb2 = app.lookup("cmb2");
				// 콤보박스에 filter(regex)를 설정
				cmb2.setFilter("parent == \"" + cmb1.value + "\"");
				cmb2.redraw();
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출. ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb2SelectionChange(/* cpr.events.CSelectionEvent */e) {
				/**
				 * @type cpr.controls.ComboBox
				 */
				var cmb2 = e.control;
			
				var cmb3 = app.lookup("cmb3");
				// 콤보박스에 filter(regex)를 설정
				cmb3.setFilter("parent == \"" + cmb2.value + "\"");
				cmb3.redraw();
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			app.declareBindableAppProperty("explain", null);
			var dataSet_1 = new cpr.data.DataSet("deptList");
			dataSet_1.parseData({
				"filterCondition": "",
				"columns": [
					{"name": "code"},
					{
						"name": "name",
						"dataType": "string"
					},
					{"name": "parent"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dept");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "ldept",
						"defaultValue": "11000"
					},
					{
						"name": "mdept",
						"defaultValue": "11100"
					},
					{
						"name": "sdept",
						"defaultValue": "21040"
					}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subDeptList");
			submission_1.action = "../example/getDeptList.do";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubDeptListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubDeptListSubmitSuccess);
			}
			app.register(submission_1);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("grp");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["200px", "200px", "200px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var comboBox_1 = new cpr.controls.ComboBox("cmb1");
				comboBox_1.placeholder = "선택하세요";
				comboBox_1.bind("value").toDataMap(app.lookup("dept"), "ldept");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("deptList"), {
						"label": "name",
						"value": "code"
					})
				})(comboBox_1);
				if(typeof onCmb1SelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCmb1SelectionChange);
				}
				container.addChild(comboBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var comboBox_2 = new cpr.controls.ComboBox("cmb2");
				comboBox_2.placeholder = "선택하세요";
				comboBox_2.bind("value").toDataMap(app.lookup("dept"), "mdept");
				(function(comboBox_2){
					comboBox_2.setItemSet(app.lookup("deptList"), {
						"label": "name",
						"value": "code"
					})
				})(comboBox_2);
				if(typeof onCmb2SelectionChange == "function") {
					comboBox_2.addEventListener("selection-change", onCmb2SelectionChange);
				}
				container.addChild(comboBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var comboBox_3 = new cpr.controls.ComboBox("cmb3");
				comboBox_3.placeholder = "선택하세요";
				comboBox_3.bind("value").toDataMap(app.lookup("dept"), "sdept");
				(function(comboBox_3){
					comboBox_3.setItemSet(app.lookup("deptList"), {
						"label": "name",
						"value": "code"
					})
				})(comboBox_3);
				container.addChild(comboBox_3, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "fill"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "70px",
				"right": "10px",
				"left": "10px",
				"height": "30px"
			});
			
			var userDefinedControl_1 = new udc.pagetitle2();
			userDefinedControl_1.bind("title").toAppProperty("title");
			userDefinedControl_1.bind("explain").toAppProperty("explain");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "50px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "thricecombo";
	cpr.core.Platform.INSTANCE.register(app);
})();
