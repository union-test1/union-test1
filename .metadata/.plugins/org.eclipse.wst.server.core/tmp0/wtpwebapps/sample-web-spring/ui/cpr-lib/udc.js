/// start - udc.button_grid
/*
 * UDC Qualified Name: udc.button_grid
 * App URI: udc/button_grid
 * Source Location: udc/button_grid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/button_grid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var evt = new cpr.events.CUIEvent("insert");
				app.dispatchEvent(evt);
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var evt = new cpr.events.CUIEvent("delete");
				app.dispatchEvent(evt);
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var evt = new cpr.events.CUIEvent("reset");
				app.dispatchEvent(evt);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "enabled") {
					app.getContainer().enabled = e.newValue;
				}
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "11px", "11px", "11px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "";
				button_1.style.css({
					"background-repeat" : "no-repeat",
					"background-size" : "11px",
					"background-position" : "center",
					"background-image" : "url('images/btn_grid_add.gif')"
				});
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "";
				button_2.style.css({
					"background-repeat" : "no-repeat",
					"background-size" : "11px",
					"background-image" : "url('images/btn_grid_delete.gif')",
					"background-position" : "center"
				});
				if(typeof onButtonClick2 == "function") {
					button_2.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button();
				button_3.value = "";
				button_3.style.css({
					"background-repeat" : "no-repeat",
					"background-size" : "11px",
					"background-image" : "url('images/btn_grid_undo.gif')",
					"background-position" : "center"
				});
				if(typeof onButtonClick3 == "function") {
					button_3.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_3, {
					"colIndex": 3,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for button_grid
	cpr.utils.Util.ensurePackage("udc").button_grid = function(id){
		cpr.controls.UDCBase.call(this, "udc.button_grid", internalApp, id);
	};
	
	udc.button_grid.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.button_grid.prototype, "type", {
		get : function(){
			return "udc.button_grid";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.button_grid
/// start - udc.currencyLabel
/*
 * UDC Qualified Name: udc.currencyLabel
 * App URI: udc/currencyLabel
 * Source Location: udc/currencyLabel.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/currencyLabel", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "format"){
					app.lookup("label").format = e.newValue;
				}else if(e.property == "dataType"){
					app.lookup("dataType").datatype = e.newValue;
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareBindableAppProperty("postfix", "\u20a9");
			app.declareAppProperty("format", "s000,000,000,000");
			app.declareAppProperty("dataType", "number");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("postfix");
			output_1.value = "Output";
			output_1.bind("value").toAppProperty("postfix");
			container.addChild(output_1, {
				"top": "0px",
				"bottom": "0px",
				"left": "0px",
				"width": "30px"
			});
			
			var output_2 = new cpr.controls.Output("label");
			output_2.value = "Output";
			output_2.dataType = "number";
			output_2.format = "s000,000,000,000";
			output_2.bind("value").toAppProperty("value");
			container.addChild(output_2, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "30px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for currencyLabel
	cpr.utils.Util.ensurePackage("udc").currencyLabel = function(id){
		cpr.controls.UDCBase.call(this, "udc.currencyLabel", internalApp, id);
	};
	
	udc.currencyLabel.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.currencyLabel.prototype, "type", {
		get : function(){
			return "udc.currencyLabel";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.currencyLabel.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.currencyLabel.prototype, "postfix", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("postfix");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("postfix", newValue, true);
		}
	});
	Object.defineProperty(udc.currencyLabel.prototype, "format", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("format");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("format", newValue, true);
		}
	});
	Object.defineProperty(udc.currencyLabel.prototype, "dataType", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataType");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataType", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.currencyLabel
/// start - udc.fileupload
/*
 * UDC Qualified Name: udc.fileupload
 * App URI: udc/fileupload
 * Source Location: udc/fileupload.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/fileupload", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			exports.getFiles = function() {
				var fileuploader = app.lookup("fud1");
				return fileuploader.getFiles();
			};
			
			/*
			 * 파일 업로드에서 sendbutton-click 이벤트 발생 시 호출.
			 * 파일을 전송하는 button을 클릭 시 발생하는 이벤트.
			 */
			function onFud1SendbuttonClick(/* cpr.events.CEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var fud1 = e.control;
				var eventObj = new cpr.events.CEvent("filesend");
				app.dispatchEvent(eventObj);
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var fileUpload_1 = new cpr.controls.FileUpload("fud1");
			fileUpload_1.maxFileCount = 1;
			if(typeof onFud1SendbuttonClick == "function") {
				fileUpload_1.addEventListener("sendbutton-click", onFud1SendbuttonClick);
			}
			container.addChild(fileUpload_1, {
				"width": "513px",
				"height": "229px",
				"left": "calc(50% - 256px)",
				"top": "calc(50% - 114px)"
			});
		}
	});
	
	// Type declaration for fileupload
	cpr.utils.Util.ensurePackage("udc").fileupload = function(id){
		cpr.controls.UDCBase.call(this, "udc.fileupload", internalApp, id);
	};
	
	udc.fileupload.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.fileupload.prototype, "type", {
		get : function(){
			return "udc.fileupload";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.fileupload
/// start - udc.grid.grid_filter
/*
 * UDC Qualified Name: udc.grid.grid_filter
 * App URI: udc/grid/grid_filter
 * Source Location: udc/grid/grid_filter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/grid/grid_filter", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			exports.getCondition = function() {
				
				var dm = app.lookup("dm1");
				var condition = "";
				var columnName =  dm.getValue("columnName");
				var compareOperator =  dm.getValue("compareOperator");
				var value =  dm.getValue("columnName");
				
				if (columnName != "" && compareOperator != "" && value != "") {
					if (dm.getValue("logicalOperator") != "") {
						condition += dm.getValue("logicalOperator") + " "; 
					}
					condition += dm.getValue("columnName") + " ";
					condition += dm.getValue("compareOperator") + " "; 
					condition += "'" + dm.getValue("value") + "'";
				}
			
				
				return condition;
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				
				var propertyName = e.property;
				
				if (propertyName == "visible_logical_operator") {
					app.lookup("cmb1").redraw();
					
				} else if (propertyName == "column_dataset") {
					var cmb2 = app.lookup("cmb2");
					cmb2.setItemSet(e.newValue, {label : "label", value : "value"});
					cmb2.redraw();
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("visible_logical_operator", true);
			app.declareBindableAppProperty("column_dataset", null);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{"name": "logicalOperator"},
					{"name": "columnName"},
					{"name": "compareOperator"},
					{"name": "value"}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "10";
			formLayout_1.setColumns(["1fr", "2fr", "1fr", "2fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var comboBox_1 = new cpr.controls.ComboBox("cmb1");
				comboBox_1.bind("visible").toAppProperty("visible_logical_operator");
				comboBox_1.bind("value").toDataMap(app.lookup("dm1"), "logicalOperator");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("AND", "&&"));
					comboBox_1.addItem(new cpr.controls.Item("OR", "||"));
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var comboBox_2 = new cpr.controls.ComboBox("cmb2");
				comboBox_2.bind("value").toDataMap(app.lookup("dm1"), "columnName");
				(function(comboBox_2){
				})(comboBox_2);
				container.addChild(comboBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var comboBox_3 = new cpr.controls.ComboBox("cmb3");
				comboBox_3.bind("value").toDataMap(app.lookup("dm1"), "compareOperator");
				(function(comboBox_3){
					comboBox_3.addItem(new cpr.controls.Item("==", "=="));
					comboBox_3.addItem(new cpr.controls.Item("*=", "*="));
					comboBox_3.addItem(new cpr.controls.Item(">=", ">="));
					comboBox_3.addItem(new cpr.controls.Item("<=", "<="));
					comboBox_3.addItem(new cpr.controls.Item("^=", "^="));
					comboBox_3.addItem(new cpr.controls.Item("$=", "$="));
				})(comboBox_3);
				container.addChild(comboBox_3, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.bind("value").toDataMap(app.lookup("dm1"), "value");
				container.addChild(inputBox_1, {
					"colIndex": 3,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "1px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for grid_filter
	cpr.utils.Util.ensurePackage("udc.grid").grid_filter = function(id){
		cpr.controls.UDCBase.call(this, "udc.grid.grid_filter", internalApp, id);
	};
	
	udc.grid.grid_filter.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.grid.grid_filter.prototype, "type", {
		get : function(){
			return "udc.grid.grid_filter";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.grid.grid_filter.prototype, "visible_logical_operator", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("visible_logical_operator");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("visible_logical_operator", newValue, true);
		}
	});
	Object.defineProperty(udc.grid.grid_filter.prototype, "column_dataset", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("column_dataset");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("column_dataset", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.grid.grid_filter
/// start - udc.grid.grid_sort
/*
 * UDC Qualified Name: udc.grid.grid_sort
 * App URI: udc/grid/grid_sort
 * Source Location: udc/grid/grid_sort.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/grid/grid_sort", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			exports.getCondition = function() {
				
				var dm = app.lookup("dm1");
				var condition = "";
				var columnName =  dm.getValue("columnName");
				var sortType =  dm.getValue("sortType");
				
				if (columnName != "" && sortType != "") {
					condition = dm.getValue("columnName") + " " + dm.getValue("sortType");
			//		condition += dm.getValue("sortType") + "'";
				}
				
				return condition;
			};
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var propertyName = e.property;
				
				if(propertyName == "column_dataset"){
					var cmb1 = app.lookup("cmb1");
					cmb1.setItemSet(e.newValue, {label: "label", value: "value"});
					cmb1.redraw();
					
					var cmb2 = app.lookup("cmb2");
					cmb2.selectItemByLabel("ASC");
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("column_dataset", null);
			var dataMap_1 = new cpr.data.DataMap("dm1");
			dataMap_1.parseData({
				"columns" : [
					{"name": "columnName"},
					{"name": "sortType"}
				]
			});
			app.register(dataMap_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "10";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var comboBox_1 = new cpr.controls.ComboBox("cmb1");
				comboBox_1.bind("value").toDataMap(app.lookup("dm1"), "columnName");
				(function(comboBox_1){
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var comboBox_2 = new cpr.controls.ComboBox("cmb2");
				comboBox_2.bind("value").toDataMap(app.lookup("dm1"), "sortType");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("ASC", "ASC"));
					comboBox_2.addItem(new cpr.controls.Item("DESC", "DESC"));
				})(comboBox_2);
				container.addChild(comboBox_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for grid_sort
	cpr.utils.Util.ensurePackage("udc.grid").grid_sort = function(id){
		cpr.controls.UDCBase.call(this, "udc.grid.grid_sort", internalApp, id);
	};
	
	udc.grid.grid_sort.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.grid.grid_sort.prototype, "type", {
		get : function(){
			return "udc.grid.grid_sort";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.grid.grid_sort.prototype, "column_dataset", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("column_dataset");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("column_dataset", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.grid.grid_sort
/// start - udc.layout.screenChangeUdc
/*
 * UDC Qualified Name: udc.layout.screenChangeUdc
 * App URI: udc/layout/screenChangeUdc
 * Source Location: udc/layout/screenChangeUdc.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/layout/screenChangeUdc", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * screenChangeUdc.js
			 * Created at 2018. 8. 13. 오후 4:02:15.
			 *
			 * @author leeds
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * Body에서 screen-change 이벤트 발생 시 호출.
			 * 스크린 크기 변경 시 호출되는 이벤트.
			 */
			function onBodyScreenChange(/* cpr.events.CScreenChangeEvent */ e){
				var rdb = app.lookup("rdb1");
				var cmb = app.lookup("cmb1");
				
				if(e.screen.name == "default"){
					cmb.visible = false;
					rdb.visible = true;
				}else{
					cmb.visible = true;
					rdb.visible = false;
				}
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var rdb = app.lookup("rdb1");
				var cmb = app.lookup("cmb1");
				
				var ds = e.newValue;
				if(e.property == "dataSet"){
					rdb.setItemSet(ds, {
						label : "label",
						value : "value"
					});
					
					cmb.setItemSet(ds, {
						label : "label",
						value : "value"
					});
					
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			app.declareAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			comboBox_1.visible = false;
			comboBox_1.bind("value").toAppProperty("value");
			(function(comboBox_1){
			})(comboBox_1);
			container.addChild(comboBox_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("rdb1");
			radioButton_1.bind("value").toAppProperty("value");
			(function(radioButton_1){
			})(radioButton_1);
			container.addChild(radioButton_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for screenChangeUdc
	cpr.utils.Util.ensurePackage("udc.layout").screenChangeUdc = function(id){
		cpr.controls.UDCBase.call(this, "udc.layout.screenChangeUdc", internalApp, id);
	};
	
	udc.layout.screenChangeUdc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.layout.screenChangeUdc.prototype, "type", {
		get : function(){
			return "udc.layout.screenChangeUdc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.layout.screenChangeUdc.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	Object.defineProperty(udc.layout.screenChangeUdc.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.layout.screenChangeUdc
/// start - udc.loadmask.loadmask
/*
 * UDC Qualified Name: udc.loadmask.loadmask
 * App URI: udc/loadmask/loadmask
 * Source Location: udc/loadmask/loadmask.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/loadmask/loadmask", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "2px",
				"border-bottom-color" : "#959697",
				"border-right-width" : "2px",
				"border-left-color" : "#959697",
				"border-right-color" : "#959697",
				"border-left-width" : "2px",
				"border-top-style" : "solid",
				"background-color" : "#ffffff",
				"border-left-style" : "solid",
				"border-bottom-width" : "2px",
				"border-top-color" : "#959697",
				"border-bottom-style" : "solid"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				output_1.style.css({
					"padding-top" : "7px",
					"background-repeat" : "no-repeat",
					"font-weight" : "bold",
					"padding-left" : "40px",
					"padding-bottom" : "0px",
					"background-image" : "url('images/loader.gif')",
					"padding-right" : "0px"
				});
				container.addChild(output_1, {
					"width": "138px",
					"height": "32px",
					"left": "calc(50% - 69px)",
					"top": "calc(50% - 16px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	
	// Type declaration for loadmask
	cpr.utils.Util.ensurePackage("udc.loadmask").loadmask = function(id){
		cpr.controls.UDCBase.call(this, "udc.loadmask.loadmask", internalApp, id);
	};
	
	udc.loadmask.loadmask.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.loadmask.loadmask.prototype, "type", {
		get : function(){
			return "udc.loadmask.loadmask";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.loadmask.loadmask
/// start - udc.loadmask.loadmaskprogress
/*
 * UDC Qualified Name: udc.loadmask.loadmaskprogress
 * App URI: udc/loadmask/loadmaskprogress
 * Source Location: udc/loadmask/loadmaskprogress.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/loadmask/loadmaskprogress", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			var intervalID = null;
			
			exports.start = function() {
				var progressbar = app.lookup("progressbar");
				
				if(intervalID) {
					window.clearInterval(intervalID);
					intervalID = null;
				}
				
				intervalID = window.setInterval(function() {
					var pValue = progressbar.numberValue;
					pValue += 4;
					if(pValue > progressbar.max) {
						progressbar.numberValue = 0;
					} else {
						progressbar.numberValue = pValue;
					}
				}, 100);
			}
			
			exports.end = function() {
				if(intervalID) {
					window.clearInterval(intervalID);
					var progressbar = app.lookup("progressbar");
					progressbar.numberValue = 0;
					intervalID = null;
				}
			}
			// End - User Script
			
			// Header
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["cl-loadmask", "cl-overlay"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-dialog"]);
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var progress_1 = new cpr.controls.Progress("progressbar");
				progress_1.value = "0";
				progress_1.max = 100.0;
				container.addChild(progress_1, {
					"top": "50px",
					"right": "20px",
					"left": "20px",
					"height": "20px"
				});
				var output_1 = new cpr.controls.Output();
				output_1.value = "Loading...";
				output_1.style.css({
					"font-weight" : "bold",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "98px",
					"right": "130px",
					"left": "130px",
					"height": "20px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "400px",
				"height": "200px",
				"left": "calc(50% - 200px)",
				"top": "calc(50% - 100px)"
			});
		}
	});
	
	// Type declaration for loadmaskprogress
	cpr.utils.Util.ensurePackage("udc.loadmask").loadmaskprogress = function(id){
		cpr.controls.UDCBase.call(this, "udc.loadmask.loadmaskprogress", internalApp, id);
	};
	
	udc.loadmask.loadmaskprogress.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.loadmask.loadmaskprogress.prototype, "type", {
		get : function(){
			return "udc.loadmask.loadmaskprogress";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.loadmask.loadmaskprogress
/// start - udc.main.header
/*
 * UDC Qualified Name: udc.main.header
 * App URI: udc/main/header
 * Source Location: udc/main/header.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/main/header", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			cpr.core.NotificationCenter.INSTANCE.subscribe("notice", null, function(msg) {
				var glbConsole = app.lookup("glb_console");
				glbConsole.info(msg);
			});
			
			/*
			 * "Logout" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.dispatchEvent(new cpr.events.CUIEvent("logout"));
			}
			
			/*
			 * "X" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				app.dispatchEvent(new cpr.events.CUIEvent("close"));
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all", "main");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-color" : "#f0eeef",
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var notifier_1 = new cpr.controls.Notifier("glb_console");
			notifier_1.close = true;
			notifier_1.successClose = true;
			notifier_1.infoClose = true;
			container.addChild(notifier_1, {
				"top": "5px",
				"right": "70px",
				"left": "191px",
				"height": "37px"
			});
			
			var image_1 = new cpr.controls.Image();
			image_1.src = "images/exb6_logo.png";
			container.addChild(image_1, {
				"top": "5px",
				"left": "5px",
				"width": "176px",
				"height": "37px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "Logout";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "10px",
				"right": "10px",
				"width": "50px",
				"height": "20px"
			});
		}
	});
	
	// Type declaration for header
	cpr.utils.Util.ensurePackage("udc.main").header = function(id){
		cpr.controls.UDCBase.call(this, "udc.main.header", internalApp, id);
	};
	
	udc.main.header.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.main.header.prototype, "type", {
		get : function(){
			return "udc.main.header";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.main.header
/// start - udc.main.left
/*
 * UDC Qualified Name: udc.main.left
 * App URI: udc/main/left
 * Source Location: udc/main/left.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/main/left", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var comUtil = createComUtil(app);
			
			exports.filterTree = function(){
				/**
				 * @type cpr.controls.InputBox
				 */
				var ipb_search = app.lookup("ipb_search");
				var arr = []
				var nArr = arr.concat(ipb_search.displayText);
				
				/**
				 * @type cpr.data.DataSet
				 */	
				var leftMenuList = app.lookup("leftMenuList");
				leftMenuList.setFilter("menuNm *= '" + nArr[0] +"'");
				
				 app.lookup("menuTree").redraw();
			}
			
			/**
			 * 외부에서 메뉴 선택처리
			 **/
			exports.selectMenu = function(menuId) {
				alert("select menu");
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				var subGetMenuList = app.lookup("subGetMenuList");
				subGetMenuList.send();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubGetMenuListSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				var menuTree = app.lookup("menuTree");
				menuTree.expandAllItems();
				menuTree.redraw();
			}
			
			function createEventParam(selection) {
				var param = {menuId : null, menuNm : null, appId : null, menuExplain: null};
				if(selection) {
					var item;
					if(Array.isArray(selection)) {
						if(selection.length > 0) {
							item = selection[0].row;
						} else {
							return param;
						}
					} else {
						item = selection.row;
					}
					param.menuId = item.getValue("menuId");
					param.menuNm = item.getValue("menuNm");
					param.appId = item.getValue("appId");
					param.menuExplain = item.getValue("menuExplain");
				}
				
				return param;
			}
			
			/*
			 * 트리에서 before-selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change가 발생합니다.
			 */
			function onMenuTreeBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var menuTree = e.control;
				var oldSelection = e.oldSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				var newSelection = e.newSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				
				var eventObject = new cpr.events.CSelectionEvent("menu_before_select", { oldSelection: createEventParam(oldSelection), newSelection: createEventParam(newSelection) });
				app.dispatchEvent(eventObject);
				
				// 메뉴의 선택 차단
				if(eventObject.defaultPrevented == true) {
					e.preventDefault();
				}
			}
			
			/*
			 * 트리에서 selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장된 후에 발생하는 이벤트.
			 */
			function onMenuTreeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var menuTree = e.control;
				var oldSelection = e.oldSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
				var newSelection = e.newSelection; // event 객체에 대한 명세(어떤 객체들이 들어가 있는지, API 또는 도움말) --> API를 통해 세부 메소드 및 객체 접근 참조
			
				var eventObject = new cpr.events.CSelectionEvent("menu_select", { oldSelection: createEventParam(oldSelection), newSelection: createEventParam(newSelection) });
				app.dispatchEvent(eventObject);
			}
			
			/*
			 * 트리에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onMenuTreeItemClick(/* cpr.events.CItemEvent */ e){
				/** 
				 * @type cpr.controls.Tree
				 */
				var menuTree = e.control;
				
				var selectedItem = e.item;
				
				var eventObject = new cpr.events.CItemEvent("menu_click", { item: createEventParam(selectedItem) });
				app.dispatchEvent(eventObject);
			}
			
			
			
			/*
			 * "+" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				var menuTree = app.lookup("menuTree");
				menuTree.expandAllItems();
				menuTree.redraw();
			}
			
			/*
			 * "-" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				var menuTree = app.lookup("menuTree");
				menuTree.collapseAllItems();
				menuTree.redraw();
				
			}
			
			
			/*
			 * 인풋 박스에서 keyup 이벤트 발생 시 호출.
			 * 사용자가 키에서 손을 뗄 때 발생하는 이벤트.
			 */
			function onIpb_searchKeyup(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb_search = e.control;
				var eventObject = new cpr.events.CKeyboardEvent("keyup");
				app.dispatchEvent(eventObject);
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("leftMenuList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "menuId"},
					{"name": "menuNm"},
					{"name": "upMenuId"},
					{"name": "appId"},
					{"name": "menuExplain"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("subGetMenuList");
			submission_1.action = "../getMenuList.do";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubGetMenuListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubGetMenuListSubmitSuccess);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var tree_1 = new cpr.controls.Tree("menuTree");
			(function(tree_1){
				tree_1.setItemSet(app.lookup("leftMenuList"), {
					"label": "menuNm",
					"value": "menuId",
					"parentValue": "upMenuId"
				});
			})(tree_1);
			if(typeof onMenuTreeBeforeSelectionChange == "function") {
				tree_1.addEventListener("before-selection-change", onMenuTreeBeforeSelectionChange);
			}
			if(typeof onMenuTreeSelectionChange == "function") {
				tree_1.addEventListener("selection-change", onMenuTreeSelectionChange);
			}
			if(typeof onMenuTreeItemClick == "function") {
				tree_1.addEventListener("item-click", onMenuTreeItemClick);
			}
			container.addChild(tree_1, {
				"top": "25px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "2";
			formLayout_1.bottomMargin = "2";
			formLayout_1.horizontalSpacing = "2";
			formLayout_1.setColumns(["1fr", "21px", "21px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "";
				button_1.style.css({
					"border-radius" : "4px 4px 0px 0px",
					"background-color" : "#FFFFFF",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "50% 50%",
					"background-image" : "url('images/expand.png')",
					"border-top-style" : "none"
				});
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "";
				button_2.style.css({
					"border-radius" : "4px 4px 0px 0px",
					"background-color" : "#FFFFFF",
					"border-right-style" : "none",
					"background-repeat" : "no-repeat",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-position" : "50% 50%",
					"background-image" : "url('images/collapse.png')",
					"border-top-style" : "none"
				});
				if(typeof onButtonClick2 == "function") {
					button_2.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb_search");
				if(typeof onIpb_searchKeyup == "function") {
					inputBox_1.addEventListener("keyup", onIpb_searchKeyup);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "fill",
					"verticalAlign": "fill",
					"height": 25
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"left": "0px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for left
	cpr.utils.Util.ensurePackage("udc.main").left = function(id){
		cpr.controls.UDCBase.call(this, "udc.main.left", internalApp, id);
	};
	
	udc.main.left.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.main.left.prototype, "type", {
		get : function(){
			return "udc.main.left";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.main.left
/// start - udc.NavigationBar
/*
 * UDC Qualified Name: udc.NavigationBar
 * App URI: udc/NavigationBar
 * Source Location: udc/NavigationBar.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/NavigationBar", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var _popupMenu = null; //네비게이션바의 팝업 메뉴
			var _popupTree = null; //버튼의 팝업 트리
			var _treeNodes = []; //데이터셋을 트리구조로 변경한 데이터
			//아이템의 속성 이름
			var TREEITEM = {
				LABEL: "label",
				VALUE: "value",
				PARENT: "parentValue"
			}
			
			//TODO: items 데이터셋의 컬럼명을 동일하게 설정해 주세요.
			var DATASET_BIND_COLUMN = {
				LABEL: "label",
				VALUE: "value",
				PARENT: "parentValue"
			};
			
			/**
			 * 데이터 삭제
			 */
			function dispose() {
				disposeControl();
				_treeNodes = [];
			}
			
			/**
			 * 팝업 컨트롤 리셋
			 */
			function disposeControl() {
				if (_popupMenu) {
					_popupMenu.dispose();
					_popupMenu = null;
				}
				if (_popupTree) {
					_popupTree.dispose();
					_popupTree = null;
				}
				var naviCtrl = app.lookup("navi");
				if(naviCtrl) {
					naviCtrl.value = "";
				}
			}
			
			/**
			 * 팝업이 열려있는지 여부
			 */
			function isOpen() {
				if (_popupMenu || _popupTree) {
					return true;
				}
				return false;
			}
			
			/**
			 * 팝업에 사용되는 트리 컨트롤 생성
			 */
			function createPopupTree() {
				var tree = new cpr.controls.Tree("tree");
				_popupTree = tree;
				tree.indent = 10;
			
				//포커스가 없어졌을때 사라지도록 함.
				tree.addEventListener("blur", function(event) {
					disposeControl();
				});
				//선택했을때 사라지도록 함
				tree.addEventListener("selection-change", function(event) {
					selectionEvent(event.newSelection[0]);
					disposeControl();
				});
			
				tree.setItemSet(app.lookup("items"), {
					label: "label",
					value: "value",
					icon: "",
					parentValue: "parentValue"
				});
			
				return tree;
			}
			
			/**
			 * 팝업에 사용되는 메뉴 컨트롤 생성
			 * @param selectedNode
			 * @param calbackDispose
			 */
			function createPopupMenu(selectedNode, calbackDispose) {
				var menu = new cpr.controls.Menu("menu");
				_popupMenu = menu;
			
				menu.addEventListener("blur", function(event) {
					disposeControl();
					calbackDispose();
				});
				menu.addEventListener("selection-change", function(event) {
					selectionEvent(event.newSelection[0]);
					disposeControl();
					calbackDispose();
				});
				var children = selectedNode.children;
				setMenuItems(menu, children);
				return menu;
			}
			
			/**
			 * 메뉴 컨트롤의 아이템 세팅
			 * @param menu
			 * @param nodes
			 */
			function setMenuItems(menu, nodes) {
				for (var i = 0; i < nodes.length; i++) {
					var node = nodes[i];
					var item = node.owner;
					menu.addItem(new cpr.controls.MenuItem(item.label, item.value, item.parentValue));
					if (node.children != null) {
						setMenuItems(menu, node.children);
					}
				}
			}
			
			/**
			 * 팝업이 나타날 위치 계산
			 * @param element
			 */
			function getCoords(element) {
				var box = element.getBoundingClientRect();
			
				var body = document.body;
				var docEl = document.documentElement;
			
				var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
				var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
			
				var clientTop = docEl.clientTop || body.clientTop || 0;
				var clientLeft = docEl.clientLeft || body.clientLeft || 0;
			
				var top = box.top + scrollTop - clientTop;
				var left = box.left + scrollLeft - clientLeft;
			
				return {
					top: Math.round(top),
					left: Math.round(left)
				};
			}
			
			/**
			 * 엘리먼트 찾기 
			 * @param selector
			 * @param root
			 * @param element
			 */
			function closetElement(selector, root, element) {
				var matchesSelector = _getMatchesSelector(element);
			
				if (matchesSelector) {
					for (element; element != null; element = element.parentElement) {
			
						if (matchesSelector.call(element, selector)) {
			
							return element;
						}
			
						if (root != null && element === root) {
							return null;
						}
					}
				}
				return null;
			}
			
			/**
			 * 엘리먼트의 matchesSelector 가져오기
			 * @param element
			 */
			function _getMatchesSelector(element) {
				var matchesSelector = element.matches // standard
					||
					element.msMatchesSelector // IE 9 or higher
					||
					element.webkitMatchesSelector // Chrome 34 or higher , Opera 15.0 or higher
					||
					element["mozMatchesSelector"] // Firefox 3.6 or higher
					||
					element["oMatchesSelector"]; // Opera 11.5 or higher
			
				return matchesSelector;
			}
			
			/**
			 * 리사이즈 이벤트 발생시 표시되고 있는 팝업 닫기
			 */
			function resizeEvent() {
				disposeControl();
			}
			
			/**
			 * 샘플 데이터 생성하는 메소드.
			 * 삭제해도 됩니다.
			 * @param ds
			 * @param count
			 */
			function createNaviItems( /*cpr.data.DataSet*/ ds, count) {
				var row = {};
				for (var i = 0; i < count[0]; i++) {
					var val = "0" + i;
					row = {};
					row[DATASET_BIND_COLUMN.LABEL] = getName();
					row[DATASET_BIND_COLUMN.VALUE] = val;
					row[DATASET_BIND_COLUMN.PARENT] = "";
					ds.insertRowData(ds.getRowCount(), false, row);
					for (var j = 0; j < count[1]; j++) {
						var pval = val + "0" + j;
						row = {};
						row[DATASET_BIND_COLUMN.LABEL] = getName();
						row[DATASET_BIND_COLUMN.VALUE] = pval;
						row[DATASET_BIND_COLUMN.PARENT] = val;
						ds.insertRowData(ds.getRowCount(), false, row);
						//			navi.addItem(new cpr.controls.MenuItem(getName(), pval, val));
						for (var l = 0; l < count[2]; l++) {
							var ppval = pval + "0" + l;
							row = {};
							row[DATASET_BIND_COLUMN.LABEL] = getName();
							row[DATASET_BIND_COLUMN.VALUE] = ppval;
							row[DATASET_BIND_COLUMN.PARENT] = pval;
							ds.insertRowData(ds.getRowCount(), false, row);
							//				navi.addItem(new cpr.controls.MenuItem(getName(), ppval, pval));
							for (var g = 0; g < count[3]; g++) {
								var pppval = ppval + "0" + g;
								row = {};
								row[DATASET_BIND_COLUMN.LABEL] = getName();
								row[DATASET_BIND_COLUMN.VALUE] = pppval;
								row[DATASET_BIND_COLUMN.PARENT] = ppval;
								ds.insertRowData(ds.getRowCount(), false, row);
								//					navi.addItem(new cpr.controls.MenuItem(getName(), pppval, ppval));
							}
						}
					}
				}
			}
			
			/**
			 * 샘플 데이터 생성하는 메소드.
			 * 삭제해도 됩니다.
			 */
			function getName() {
				var chars = ["가", "문", "헤", "호", "박", "제", "채", "이"];
				var result = "";
				for (var i = 0; i < 3; i++) {
					var pos = Math.floor(Math.random() * chars.length);
					result += chars[pos];
				}
				return result;
			}
			
			/**
			 * 데이터셋의 데이터를 트리구조로 생성
			 * @param object
			 */
			function createTreeNodes(object) {
				var ds = app.lookup("items");
				var rowCount = ds.getRowCount();
				var headers = ds.getHeaders();
			
				//데이터셋 컬럼 이름에 대한 아이템 속성명 설정
				var names = {};
				names[DATASET_BIND_COLUMN.VALUE] = "value";
				names[DATASET_BIND_COLUMN.LABEL] = "label";
				names[DATASET_BIND_COLUMN.PARENT] = "parentValue";
			
				var result;
				if (!object) {
					result = {};
			
					for (var i = 0; i < rowCount; i++) {
						var row = ds.getRow(i);
						var item = {};
						headers.forEach(function( /* cpr.data.header.Header */ each) {
							item[names[each.getName()]] = row.getValue(each.getName());
						});
						result[item.value] = {
							parent: null,
							owner: item,
							children: null
						};
					}
					return createTreeNodes(result);
				}
				result = [];
				for (var each in object) {
					var parentValue = object[each].owner.parentValue;
			
					if (object[parentValue] && parentValue != object[each].owner.value) {
						if (object[parentValue]["children"] == null) {
							object[parentValue]["children"] = [];
						}
						object[each].parent = object[parentValue];
						object[parentValue]["children"].push(object[each]);
					} else {
						result.push(object[each]);
					}
				}
				object = null;
				return result;
			
			}
			
			/*
			 * Body에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad( /* cpr.events.CEvent */ e) {
				//샘플 데이터 생성
				var ds = app.lookup("items");
				createNaviItems(ds, [5, 20, 5]);
			
				//데이터셋에서 트리 노드 생성
				_treeNodes = createTreeNodes();
				var navi = app.lookup("navi");
				for (var i = 0; i < _treeNodes.length; i++) {
					var node = _treeNodes[i];
					var item = node.owner;
					navi.addItem(new cpr.controls.MenuItem(item.label, item.value, item.parentValue));
			
				}
				//TODO: 서브미션으로 데이터를 가져오는 경우 notificationCenter을 제외한 코드를 제거(위의 코드 모두 제거)
			//	app.lookup("sms1").send();
			
				//리사이즈에 대한 이벤트 한번만 설정
				cpr.core.NotificationCenter.INSTANCE.subscribe("resize", this, resizeEvent);
			
			}
			
			/*
			 * 네비게이션 바에서 item-click 이벤트 발생 시 호출.
			 * 아이템 클릭시 발생하는 이벤트.
			 */
			function onNaviItemClick( /* cpr.events.CItemEvent */ e) {
				/** 
				 * @type cpr.controls.NavigationBar
				 */
				var navi = e.control;
				
				var clickedItem = e.item;
				var selectedNode = null;
			
				for (var i = 0; i < _treeNodes.length; i++) {
					var node = _treeNodes[i];
					if (node.owner.value == clickedItem.value) {
						selectedNode = node;
						break;
					}
				}
				var hasChild = selectedNode && selectedNode.children != null;
				if (hasChild) {
					if (isOpen()) {
						disposeControl();
					}
			
					var menu = createPopupMenu(selectedNode, function() {
						navi.value = ""
					});
			
					var appRect = app.getActualRect();
					var element = closetElement("[role=menuitem]", e.nativeEvent.currentTarget, e.nativeEvent.target)
					var coords = getCoords(element);
			
					menu.style.css({
						width: "150px",
						position: "absolute",
						top: "" + (appRect.top + appRect.height) + "px",
						left: "" + coords.left + "px",
					});
			
					app.getRootAppInstance().floatControl(menu);
					menu.focus();
				}
			
			}
			
			/*
			 * "Menu" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick( /* cpr.events.CMouseEvent */ e) {
				var tree = createPopupTree();
				var actualRect = app.getActualRect();
				tree.style.css({
					position: "absolute",
					height: "300px",
					width: actualRect.width,
					top: actualRect.top + actualRect.height + "px",
					left: actualRect.left + "px"
				});
			
				app.getRootAppInstance().floatControl(tree);
				tree.focus();
			}
			
			function selectionEvent(item) {
				var event = new cpr.events.CUIEvent("selection-change", {
					content: {
						item: item
					}
				});
				app.dispatchEvent(event);
			}
			
			
			/////////////////////// 컨트롤 이벤트 ////////////////
			/*
			 * Body에서 dispose 이벤트 발생 시 호출.
			 * 컨트롤이 dispose될 때 호출되는 이벤트.
			 */
			function onBodyDispose( /* cpr.events.CEvent */ e) {
				dispose();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSms1SubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
			
				//데이터셋에서 트리 노드 생성
				_treeNodes = createTreeNodes();
				var navi = app.lookup("navi");
				for (var i = 0; i < _treeNodes.length; i++) {
					var node = _treeNodes[i];
					var item = node.owner;
					navi.addItem(new cpr.controls.MenuItem(item.label, item.value, item.parentValue));
				}
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("items");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{
						"name": "parentValue",
						"dataType": "string"
					}
				],
				"rows": []
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSms1SubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSms1SubmitSuccess);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var navigationBar_1 = new cpr.controls.NavigationBar("navi");
			(function(navigationBar_1){
			})(navigationBar_1);
			if(typeof onNaviItemClick == "function") {
				navigationBar_1.addEventListener("item-click", onNaviItemClick);
			}
			container.addChild(navigationBar_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"top": "0px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"top": "0px",
						"left": "0px",
						"width": "0px",
						"height": "0px"
					}
				]
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "&#9776;";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "0px",
						"left": "0px",
						"width": "0px",
						"height": "0px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"top": "0px",
						"left": "0px",
						"width": "0px",
						"height": "0px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"top": "0px",
						"bottom": "0px",
						"left": "0px",
						"width": "67px"
					}
				]
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyDispose == "function"){
				app.getContainer().addEventListener("dispose", onBodyDispose);
			}
		}
	});
	
	// Type declaration for NavigationBar
	cpr.utils.Util.ensurePackage("udc").NavigationBar = function(id){
		cpr.controls.UDCBase.call(this, "udc.NavigationBar", internalApp, id);
	};
	
	udc.NavigationBar.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.NavigationBar.prototype, "type", {
		get : function(){
			return "udc.NavigationBar";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.NavigationBar
/// start - udc.pageindex
/*
 * UDC Qualified Name: udc.pageindex
 * App URI: udc/pageindex
 * Source Location: udc/pageindex.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/pageindex", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/**
			 * PageIndexing을 위한 기초 데이터 설정
			 * @param totCnt
			 * @param pageSize
			 * @param rowSize
			 * @param pageIdx
			 */
			exports.setPaging = function(totCnt, pageSize, rowSize, pageIdx) {
				app.lookup("optCurrentIdx").value = pageIdx;
				app.lookup("optTot").value = totCnt;
				
				var pageCnt = 0;
				if(totCnt > 0 && rowSize > 0) {
					pageCnt = Math.ceil(totCnt / rowSize);
				}
				app.lookup("optPageCnt").value = pageCnt;
				
				var pageIndex = app.lookup("pageIndex");
				pageIndex.currentPageIndex = pageIdx;
				pageIndex.totalRowCount = totCnt;
				pageIndex.pageRowCount = rowSize;
				pageIndex.viewPageCount = pageSize;
				
				var pageIndex = app.lookup("pageIndex");
				if(totCnt == 0) {
					pageIndex.visible = false;
				} else {
					pageIndex.visible = true;
				}
				
				app.getContainer().redraw();
			}
			
			/*
			 * 페이지 인덱서에서 before-selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change를 발생합니다.
			 */
			function onPageIndexBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
				
				var selectionEvent = new cpr.events.CSelectionEvent("before-pagechange", {
					oldSelection: e.oldSelection,
					newSelection: e.newSelection
				});
				
				app.dispatchEvent(selectionEvent);
				
				// 기본처리가 중단되었을 때 변경을 취소함.
				if(selectionEvent.defaultPrevented == true) {
					e.preventDefault();
				}
			}
			
			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageIndexSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.PageIndexer
				 */
				var pageIndex = e.control;
				
				var selectionEvent = new cpr.events.CSelectionEvent("pagechange", {
					oldSelection: e.oldSelection,
					newSelection: e.newSelection
				});
				
				app.dispatchEvent(selectionEvent);
				
				app.lookup("optCurrentIdx").value = e.newSelection;
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.setColumns(["60px", "60px", "60px", "60px", "10px", "60px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "총건수 :";
				output_1.style.css({
					"text-align" : "right"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output("optTot");
				output_2.dataType = "number";
				output_2.format = "999,999,999";
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "페이지 :";
				output_3.style.css({
					"text-align" : "right"
				});
				container.addChild(output_3, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var output_4 = new cpr.controls.Output("optCurrentIdx");
				output_4.style.css({
					"text-align" : "right"
				});
				container.addChild(output_4, {
					"colIndex": 3,
					"rowIndex": 0
				});
				var output_5 = new cpr.controls.Output();
				output_5.value = "/";
				output_5.style.css({
					"text-align" : "center"
				});
				container.addChild(output_5, {
					"colIndex": 4,
					"rowIndex": 0
				});
				var output_6 = new cpr.controls.Output("optPageCnt");
				output_6.value = "0";
				container.addChild(output_6, {
					"colIndex": 5,
					"rowIndex": 0
				});
				var pageIndexer_1 = new cpr.controls.PageIndexer("pageIndex");
				pageIndexer_1.viewPageCount = 3;
				pageIndexer_1.visibleFirstButton = false;
				pageIndexer_1.visibleLastButton = false;
				pageIndexer_1.style.css({
					"text-align" : "right"
				});
				pageIndexer_1.init(1, 1, 1);
				if(typeof onPageIndexSelectionChange == "function") {
					pageIndexer_1.addEventListener("selection-change", onPageIndexSelectionChange);
				}
				if(typeof onPageIndexBeforeSelectionChange == "function") {
					pageIndexer_1.addEventListener("before-selection-change", onPageIndexBeforeSelectionChange);
				}
				container.addChild(pageIndexer_1, {
					"colIndex": 6,
					"rowIndex": 0,
					"verticalAlign": "fill",
					"height": 30
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "1px",
				"right": "0px",
				"bottom": "1px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for pageindex
	cpr.utils.Util.ensurePackage("udc").pageindex = function(id){
		cpr.controls.UDCBase.call(this, "udc.pageindex", internalApp, id);
	};
	
	udc.pageindex.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.pageindex.prototype, "type", {
		get : function(){
			return "udc.pageindex";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.pageindex
/// start - udc.pagetitle
/*
 * UDC Qualified Name: udc.pagetitle
 * App URI: udc/pagetitle
 * Source Location: udc/pagetitle.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/pagetitle", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				app.lookup("otp_title").redraw();
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.setClasses(["grp-title"]);
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.setColumns(["13px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var image_1 = new cpr.controls.Image();
				image_1.src = "images/bullet_bodytitle.gif";
				image_1.style.css({
					"font-size" : "0px"
				});
				container.addChild(image_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"verticalAlign": "center",
					"width": 13,
					"height": 8
				});
				var output_1 = new cpr.controls.Output("otp_title");
				output_1.value = "";
				output_1.style.css({
					"vertical-align" : "middle"
				});
				output_1.bind("value").toAppProperty("title");
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "1px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for pagetitle
	cpr.utils.Util.ensurePackage("udc").pagetitle = function(id){
		cpr.controls.UDCBase.call(this, "udc.pagetitle", internalApp, id);
	};
	
	udc.pagetitle.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.pagetitle.prototype, "type", {
		get : function(){
			return "udc.pagetitle";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.pagetitle.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.pagetitle
/// start - udc.pagetitle2
/*
 * UDC Qualified Name: udc.pagetitle2
 * App URI: udc/pagetitle2
 * Source Location: udc/pagetitle2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/pagetitle2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				app.lookup("opt_title");
				app.lookup("opt_explain");
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			app.declareBindableAppProperty("explain", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["13px", "1fr"]);
			formLayout_1.setRows(["1fr", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var image_1 = new cpr.controls.Image();
				image_1.src = "images/bullet_bodytitle.gif";
				container.addChild(image_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"verticalAlign": "center",
					"width": 13,
					"height": 8
				});
				var output_1 = new cpr.controls.Output("opt_title");
				output_1.value = "";
				output_1.style.css({
					"font-weight" : "bold",
					"font-size" : "14px"
				});
				output_1.bind("value").toAppProperty("title");
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var output_2 = new cpr.controls.Output("opt_explain");
				output_2.value = "";
				output_2.bind("value").toAppProperty("explain");
				container.addChild(output_2, {
					"colIndex": 1,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for pagetitle2
	cpr.utils.Util.ensurePackage("udc").pagetitle2 = function(id){
		cpr.controls.UDCBase.call(this, "udc.pagetitle2", internalApp, id);
	};
	
	udc.pagetitle2.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.pagetitle2.prototype, "type", {
		get : function(){
			return "udc.pagetitle2";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.pagetitle2.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.pagetitle2.prototype, "explain", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("explain");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("explain", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.pagetitle2
/// start - udc.range.range_digit
/*
 * UDC Qualified Name: udc.range.range_digit
 * App URI: udc/range/range_digit
 * Source Location: udc/range/range_digit.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/range/range_digit", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "10px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "~";
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var maskEditor_1 = new cpr.controls.MaskEditor("mse1");
				maskEditor_1.mask = "00000";
				container.addChild(maskEditor_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
				var maskEditor_2 = new cpr.controls.MaskEditor("mse2");
				maskEditor_2.mask = "00000";
				container.addChild(maskEditor_2, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for range_digit
	cpr.utils.Util.ensurePackage("udc.range").range_digit = function(id){
		cpr.controls.UDCBase.call(this, "udc.range.range_digit", internalApp, id);
	};
	
	udc.range.range_digit.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.range.range_digit.prototype, "type", {
		get : function(){
			return "udc.range.range_digit";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.range.range_digit
/// start - udc.range.range_m
/*
 * UDC Qualified Name: udc.range.range_m
 * App URI: udc/range/range_m
 * Source Location: udc/range/range_m.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/range/range_m", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "10px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "~";
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var dateInput_1 = new cpr.controls.DateInput("dti1");
				dateInput_1.mask = "MM";
				dateInput_1.format = "MM";
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
				var dateInput_2 = new cpr.controls.DateInput("dti2");
				dateInput_2.mask = "MM";
				dateInput_2.format = "MM";
				container.addChild(dateInput_2, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for range_m
	cpr.utils.Util.ensurePackage("udc.range").range_m = function(id){
		cpr.controls.UDCBase.call(this, "udc.range.range_m", internalApp, id);
	};
	
	udc.range.range_m.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.range.range_m.prototype, "type", {
		get : function(){
			return "udc.range.range_m";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.range.range_m
/// start - udc.range.range_time
/*
 * UDC Qualified Name: udc.range.range_time
 * App URI: udc/range/range_time
 * Source Location: udc/range/range_time.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/range/range_time", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var _controls = ["hour", "min"];//컨트롤의 아이디
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				if (e.property == "opt1") {
					
					/**
					 * @type string
					 */
					var splitedValue = e.newValue.split(":");
					//UDC의 변경된 속성 값을 컨트롤과 UDC의 value를 설정합니다. 
					for (var i = 0; i < splitedValue.length; i++) {
						var control = app.lookup(_controls[i]);
						control.value = splitedValue[i];
					}
				}
			}
			
			/*
			 * 콤보 박스에서 before-selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change가 발생합니다.
			 */
			function onMinBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var cmb1 = e.control;
				
				var oldValue = app.getAppProperty("value");
				var values = oldValue.split(":");
				
				if (cmb1.userAttr("type") == "hour") {
					values[0] = e.newSelection[0].value;
				} else {
					values[1] = e.newSelection[0].value;
				}
				
				var newValue = values.join(":");
			
				app.setAppProperty("value", newValue, false); //속성 값 설정
				var event = new cpr.events.CUIEvent("selection-change", {
					content: newValue
				});
				app.dispatchEvent(event);
				e.preventDefault();
			}
			
			if(!cpr.expression.ExpressionEngine.INSTANCE.getFunction("val")){
				cpr.expression.ExpressionEngine.INSTANCE.registerFunction("val",function(opt,index){
					if(opt){
						var value = opt.value;
						return value.split(":")[index];
					}
					return "";
				});
			
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", "00:00");
			
			app.supportMedia("all and (min-width: 1600px)", "sisw-main");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1599px)", "main");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1023px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			xYLayout_1.scrollable = false;
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var comboBox_1 = new cpr.controls.ComboBox("hour");
				comboBox_1.userAttr({"type": "hour"});
				comboBox_1.bind("value").toExpression("val(#opt1,0)");
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("00", "00"));
					comboBox_1.addItem(new cpr.controls.Item("01", "01"));
					comboBox_1.addItem(new cpr.controls.Item("02", "02"));
					comboBox_1.addItem(new cpr.controls.Item("03", "03"));
					comboBox_1.addItem(new cpr.controls.Item("04", "04"));
					comboBox_1.addItem(new cpr.controls.Item("05", "05"));
					comboBox_1.addItem(new cpr.controls.Item("06", "06"));
					comboBox_1.addItem(new cpr.controls.Item("07", "07"));
					comboBox_1.addItem(new cpr.controls.Item("08", "08"));
					comboBox_1.addItem(new cpr.controls.Item("09", "09"));
					comboBox_1.addItem(new cpr.controls.Item("10", "10"));
					comboBox_1.addItem(new cpr.controls.Item("11", "11"));
					comboBox_1.addItem(new cpr.controls.Item("12", "12"));
					comboBox_1.addItem(new cpr.controls.Item("13", "13"));
					comboBox_1.addItem(new cpr.controls.Item("14", "14"));
					comboBox_1.addItem(new cpr.controls.Item("15", "15"));
					comboBox_1.addItem(new cpr.controls.Item("16", "16"));
					comboBox_1.addItem(new cpr.controls.Item("17", "17"));
					comboBox_1.addItem(new cpr.controls.Item("18", "18"));
					comboBox_1.addItem(new cpr.controls.Item("19", "19"));
					comboBox_1.addItem(new cpr.controls.Item("20", "20"));
					comboBox_1.addItem(new cpr.controls.Item("21", "21"));
					comboBox_1.addItem(new cpr.controls.Item("22", "22"));
					comboBox_1.addItem(new cpr.controls.Item("23", "23"));
				})(comboBox_1);
				if(typeof onMinBeforeSelectionChange == "function") {
					comboBox_1.addEventListener("before-selection-change", onMinBeforeSelectionChange);
				}
				container.addChild(comboBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var comboBox_2 = new cpr.controls.ComboBox("min");
				comboBox_2.userAttr({"type": "min"});
				comboBox_2.bind("value").toExpression("val(#opt1,1)");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("00", "00"));
					comboBox_2.addItem(new cpr.controls.Item("30", "30"));
				})(comboBox_2);
				if(typeof onMinBeforeSelectionChange == "function") {
					comboBox_2.addEventListener("before-selection-change", onMinBeforeSelectionChange);
				}
				container.addChild(comboBox_2, {
					"colIndex": 1,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var output_1 = new cpr.controls.Output("opt1");
			output_1.bind("value").toAppProperty("value");
			container.addChild(output_1, {
				"top": "0px",
				"left": "0px",
				"width": "0px",
				"height": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for range_time
	cpr.utils.Util.ensurePackage("udc.range").range_time = function(id){
		cpr.controls.UDCBase.call(this, "udc.range.range_time", internalApp, id);
	};
	
	udc.range.range_time.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.range.range_time.prototype, "type", {
		get : function(){
			return "udc.range.range_time";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.range.range_time.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.range.range_time
/// start - udc.range.range_ym
/*
 * UDC Qualified Name: udc.range.range_ym
 * App URI: udc/range/range_ym
 * Source Location: udc/range/range_ym.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/range/range_ym", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "10px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "~";
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var dateInput_1 = new cpr.controls.DateInput("dti1");
				dateInput_1.calendarType = "yearmonth";
				dateInput_1.mask = "YYYY-MM";
				dateInput_1.format = "YYYYMM";
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
				var dateInput_2 = new cpr.controls.DateInput("dti2");
				dateInput_2.calendarType = "yearmonth";
				dateInput_2.mask = "YYYY-MM";
				dateInput_2.format = "YYYYMM";
				container.addChild(dateInput_2, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for range_ym
	cpr.utils.Util.ensurePackage("udc.range").range_ym = function(id){
		cpr.controls.UDCBase.call(this, "udc.range.range_ym", internalApp, id);
	};
	
	udc.range.range_ym.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.range.range_ym.prototype, "type", {
		get : function(){
			return "udc.range.range_ym";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.range.range_ym
/// start - udc.range.range_ymd
/*
 * UDC Qualified Name: udc.range.range_ymd
 * App URI: udc/range/range_ymd
 * Source Location: udc/range/range_ymd.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/range/range_ymd", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
			 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFrmDateValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var frmDate = e.control;
				
				app.setAppProperty("frmDate", e.newValue, true);
			}
			
			/*
			 * 데이트 인풋에서 value-change 이벤트 발생 시 호출.
			 * Dateinput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onToDateValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.DateInput
				 */
				var toDate = e.control;
				
				app.setAppProperty("toDate", e.newValue, true);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("frmDate", null);
			app.declareBindableAppProperty("toDate", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "10px", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "~";
				container.addChild(output_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var dateInput_1 = new cpr.controls.DateInput("frmDate");
				if(typeof onFrmDateValueChange == "function") {
					dateInput_1.addEventListener("value-change", onFrmDateValueChange);
				}
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
				var dateInput_2 = new cpr.controls.DateInput("toDate");
				if(typeof onToDateValueChange == "function") {
					dateInput_2.addEventListener("value-change", onToDateValueChange);
				}
				container.addChild(dateInput_2, {
					"colIndex": 2,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for range_ymd
	cpr.utils.Util.ensurePackage("udc.range").range_ymd = function(id){
		cpr.controls.UDCBase.call(this, "udc.range.range_ymd", internalApp, id);
	};
	
	udc.range.range_ymd.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.range.range_ymd.prototype, "type", {
		get : function(){
			return "udc.range.range_ymd";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.range.range_ymd.prototype, "frmDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("frmDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("frmDate", newValue, true);
		}
	});
	Object.defineProperty(udc.range.range_ymd.prototype, "toDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("toDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("toDate", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.range.range_ymd
/// start - udc.range.range_ymdhm
/*
 * UDC Qualified Name: udc.range.range_ymdhm
 * App URI: udc/range/range_ymdhm
 * Source Location: udc/range/range_ymdhm.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/range/range_ymdhm", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "40px", "10px", "1fr", "40px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "~";
				output_1.style.css({
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var dateInput_1 = new cpr.controls.DateInput("frmDate");
				dateInput_1.tabIndex = 1;
				container.addChild(dateInput_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
				var dateInput_2 = new cpr.controls.DateInput("toDate");
				dateInput_2.tabIndex = 3;
				container.addChild(dateInput_2, {
					"colIndex": 3,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
				var dateInput_3 = new cpr.controls.DateInput("frmHM");
				container.addChild(dateInput_3, {
					"colIndex": 1,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
				var dateInput_4 = new cpr.controls.DateInput("toHM");
				container.addChild(dateInput_4, {
					"colIndex": 4,
					"rowIndex": 0,
					"verticalAlign": "center",
					"height": 20
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for range_ymdhm
	cpr.utils.Util.ensurePackage("udc.range").range_ymdhm = function(id){
		cpr.controls.UDCBase.call(this, "udc.range.range_ymdhm", internalApp, id);
	};
	
	udc.range.range_ymdhm.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.range.range_ymdhm.prototype, "type", {
		get : function(){
			return "udc.range.range_ymdhm";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.range.range_ymdhm
/// start - udc.search.search_type1
/*
 * UDC Qualified Name: udc.search.search_type1
 * App URI: udc/search/search_type1
 * Source Location: udc/search/search_type1.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/search/search_type1", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				
				app.setAppProperty("value", e.newValue, true);
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				var ipb1 = app.lookup("ipb1");
				if(e.property == "value") {
					ipb1.value = e.newValue;
				}else if(e.property == "required"){
					ipb1.style.addClass(e.newValue);
				}
			}
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var evt = new cpr.events.CUIEvent("search");
				app.dispatchEvent(evt);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareBindableAppProperty("required", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "20px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.bind("value").toAppProperty("value");
				if(typeof onIpb1ValueChange == "function") {
					inputBox_1.addEventListener("value-change", onIpb1ValueChange);
				}
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "";
				button_1.style.css({
					"background-repeat" : "no-repeat",
					"background-image" : "url('images/btn_icon_search.gif')",
					"background-position" : "center"
				});
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "1px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for search_type1
	cpr.utils.Util.ensurePackage("udc.search").search_type1 = function(id){
		cpr.controls.UDCBase.call(this, "udc.search.search_type1", internalApp, id);
	};
	
	udc.search.search_type1.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.search.search_type1.prototype, "type", {
		get : function(){
			return "udc.search.search_type1";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.search.search_type1.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.search.search_type1.prototype, "required", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("required");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("required", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.search.search_type1
/// start - udc.search.search_type2
/*
 * UDC Qualified Name: udc.search.search_type2
 * App URI: udc/search/search_type2
 * Source Location: udc/search/search_type2.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/search/search_type2", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb1ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb1 = e.control;
				
				app.setAppProperty("code", e.newValue, true);
			}
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb2ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb2 = e.control;
				
				app.setAppProperty("value", e.newValue, true);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("code", null);
			app.declareBindableAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb1");
			if(typeof onIpb1ValueChange == "function") {
				inputBox_1.addEventListener("value-change", onIpb1ValueChange);
			}
			container.addChild(inputBox_1, {
				"left": "0px",
				"width": "70px",
				"height": "20px",
				"top": "calc(50% - 10px)"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "";
			button_1.style.css({
				"background-repeat" : "no-repeat",
				"background-image" : "url('udc/images/btn_icon_search.gif')",
				"background-position" : "center"
			});
			container.addChild(button_1, {
				"left": "75px",
				"width": "20px",
				"height": "20px",
				"top": "calc(50% - 10px)"
			});
			
			var inputBox_2 = new cpr.controls.InputBox("ipb2");
			if(typeof onIpb2ValueChange == "function") {
				inputBox_2.addEventListener("value-change", onIpb2ValueChange);
			}
			container.addChild(inputBox_2, {
				"right": "0px",
				"left": "100px",
				"height": "20px",
				"top": "calc(50% - 10px)"
			});
		}
	});
	
	// Type declaration for search_type2
	cpr.utils.Util.ensurePackage("udc.search").search_type2 = function(id){
		cpr.controls.UDCBase.call(this, "udc.search.search_type2", internalApp, id);
	};
	
	udc.search.search_type2.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.search.search_type2.prototype, "type", {
		get : function(){
			return "udc.search.search_type2";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.search.search_type2.prototype, "code", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("code");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("code", newValue, true);
		}
	});
	Object.defineProperty(udc.search.search_type2.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.search.search_type2
/// start - udc.search.searchbutton
/*
 * UDC Qualified Name: udc.search.searchbutton
 * App URI: udc/search/searchbutton
 * Source Location: udc/search/searchbutton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/search/searchbutton", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * "○" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var eventObj = new cpr.events.CUIEvent("search");
				app.dispatchEvent(eventObj);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", "");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var inputBox_1 = new cpr.controls.InputBox("ipb_input");
			inputBox_1.bind("value").toAppProperty("value");
			container.addChild(inputBox_1, {
				"top": "0px",
				"right": "21px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "";
			button_1.style.css({
				"border-right-style" : "solid",
				"background-size" : "auto",
				"border-bottom-color" : "#b4b4b4",
				"border-top-width" : "1px",
				"border-right-width" : "1px",
				"border-left-color" : "#b4b4b4",
				"border-right-color" : "#b4b4b4",
				"background-position" : "center",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "#ffffff",
				"border-radius" : "2px 2px 2px 2px",
				"background-repeat" : "no-repeat",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "#b4b4b4",
				"border-bottom-style" : "solid",
				"background-image" : "url('udc/images/icon_search.jpg')"
			});
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"width": "20px"
			});
		}
	});
	
	// Type declaration for searchbutton
	cpr.utils.Util.ensurePackage("udc.search").searchbutton = function(id){
		cpr.controls.UDCBase.call(this, "udc.search.searchbutton", internalApp, id);
	};
	
	udc.search.searchbutton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.search.searchbutton.prototype, "type", {
		get : function(){
			return "udc.search.searchbutton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.search.searchbutton.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.search.searchbutton
/// start - udc.TagBox
/*
 * UDC Qualified Name: udc.TagBox
 * App URI: udc/TagBox
 * Source Location: udc/TagBox.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/TagBox", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onUIControlShellLoad( /* cpr.events.CUIEvent */ e) {
				/**
				 * @type HTMLElement
				 */
				var divEle = e.content;
				var htmlText = app.getAppProperty("innerHTML");
				/**
				 * @type cpr.data.DataMap
				 */
				var datamap = app.getAppProperty("datamap");
				var regex;
				htmlText = htmlText.replace(/\{\$value\}/gi, app.getAppProperty("value"));
				var i;
				if (datamap != null) {
					var names = datamap.getColumnNames();
					for (i = 0; i < names.length; i++) {
						var name = names[i];
						regex = new RegExp("{dm:" + name + "}", "gi")
						htmlText = htmlText.replace(regex, datamap.getValue(name));
			
					}
				}
			
				/**
				 * @type cpr.data.DataSet
				 */
				var dataset = app.getAppProperty("dataset");
			
				if (dataset != null) {
					var si = htmlText.indexOf("{$ds-start}");
					var se = htmlText.indexOf("{$ds-end}");
					if (si > -1 && se > -1) {
						var startText = htmlText.substring(0, si);
						var copyText = htmlText.substring(si, se).replace(/\{\$ds\-start\}/gi,"");
						var endText = htmlText.substring(se, htmlText.length).replace(/\{\$ds\-end\}/gi,"");
			
						var temp = "";
						var count = dataset.getRowCount();
						var headers = dataset.getHeaders(cpr.data.header.HeaderType.ALL);
						var datasetText = "";
						for (i = 0; i < count; i++) {
							var row = dataset.getRow(i);
							temp = copyText;
							for (var l = 0; l<headers.length; l++) {
								var headerName = headers[l].getName();
								var rowValue = row.getValue(headerName);
								regex = new RegExp("{ds:" + headerName + "}", "gi");
								temp = temp.replace(regex, rowValue);
							}
							datasetText += temp;
						}
						htmlText = startText + datasetText + endText;
					}
				}
				if (htmlText) {
					divEle.innerHTML = htmlText;
				}
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				app.lookup("shell").redraw();
			}
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("innerHTML", null);
			app.declareBindableAppProperty("value", null);
			app.declareAppProperty("datamap", app.lookup(""));
			app.declareAppProperty("dataset", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shell");
			if(typeof onUIControlShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onUIControlShellLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for TagBox
	cpr.utils.Util.ensurePackage("udc").TagBox = function(id){
		cpr.controls.UDCBase.call(this, "udc.TagBox", internalApp, id);
	};
	
	udc.TagBox.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.TagBox.prototype, "type", {
		get : function(){
			return "udc.TagBox";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.TagBox.prototype, "innerHTML", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("innerHTML");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("innerHTML", newValue, true);
		}
	});
	Object.defineProperty(udc.TagBox.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.TagBox.prototype, "datamap", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("datamap");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("datamap", newValue, true);
		}
	});
	Object.defineProperty(udc.TagBox.prototype, "dataset", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataset");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataset", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.TagBox
/// start - udc.TimeTable
/*
 * UDC Qualified Name: udc.TimeTable
 * App URI: udc/TimeTable
 * Source Location: udc/TimeTable.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/TimeTable", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/**
			 * @param {cpr.data.DataCollection} ds
			 */
			function refresh(ds){
				var rowIdx, eachData, eachOutput;
				var table = app.lookup("table");
				
				table.removeAllChildren(true);
				
				for (rowIdx = 0; rowIdx < ds.getRowCount(); rowIdx++) {
					eachData = ds.getRow(rowIdx).getRowData();
					eachOutput = new cpr.controls.Output();
					table.addChild(eachOutput, {
						left: (eachData.weekday / 7 * 100) + "%",
						top : (eachData.start * 10) + "%",
						width: (100 / 7) + "%",
						height: (eachData.end - eachData.start) * 10 + "%"
					});
					eachOutput.style.css({
						"background-color": eachData.color,
						'text-align' : "center",
						"border-radius" : "5px",
						"box-shadow": "0px 2px 5px gray"
					});
					eachOutput.value = eachData.text;
				}
			}
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "dataSet"){
					/** @type cpr.data.DataCollection */
					var newDataSet = e.newValue;
					if(newDataSet){
						refresh(newDataSet);
					}
				}
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{
						"name": "weekday",
						"dataType": "number"
					},
					{
						"name": "start",
						"dataType": "number"
					},
					{
						"name": "end",
						"dataType": "number"
					},
					{
						"name": "text",
						"dataType": "string"
					},
					{"name": "color"}
				],
				"rows": [
					{"weekday": "1", "start": "1", "end": "2", "text": "text1", "color": "red"},
					{"weekday": "0", "start": "3", "end": "4", "text": "text2", "color": "orange"},
					{"weekday": "2", "start": "7", "end": "9", "text": "text3", "color": "blue"},
					{"weekday": "3", "start": "1", "end": "3", "text": "text4", "color": "magenta"},
					{"weekday": "5", "start": "4", "end": "7", "text": "text5", "color": "aliceblue"},
					{"weekday": "4", "start": "5", "end": "9", "text": "text6", "color": "cornflowerblue"},
					{"weekday": "6", "start": "3", "end": "6", "text": "text7", "color": "green"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("table");
			group_1.style.css({
				"border-right-style" : "solid",
				"background-size" : "100% 10%",
				"border-top-width" : "1px",
				"border-bottom-color" : "green",
				"border-right-width" : "1px",
				"border-left-color" : "green",
				"border-right-color" : "green",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-top-color" : "green",
				"border-bottom-style" : "solid",
				"background-image" : "linear-gradient(white calc(100% - 2px), silver 100%)"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for TimeTable
	cpr.utils.Util.ensurePackage("udc").TimeTable = function(id){
		cpr.controls.UDCBase.call(this, "udc.TimeTable", internalApp, id);
	};
	
	udc.TimeTable.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.TimeTable.prototype, "type", {
		get : function(){
			return "udc.TimeTable";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.TimeTable.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.TimeTable
