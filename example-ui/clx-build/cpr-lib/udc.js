/// start - udc.ComboOrRadio
/*
 * UDC Qualified Name: udc.ComboOrRadio
 * App URI: udc/ComboOrRadio
 * Source Location: udc/ComboOrRadio.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/ComboOrRadio", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				switch (e.property) {
					case "dataSet":
						{
							/** @type cpr.data.DataSet */
							var ds = e.newValue;
							app.lookup("cmb1").setItemSet(ds, {
								label: "label",
								value: "value"
							});
			
							app.lookup("rdb1").setItemSet(ds, {
								label: "label",
								value: "value"
							});
							break;
						}
				}
			}
			
			/*
			 * Body에서 screen-change 이벤트 발생 시 호출.
			 * 스크린 크기 변경 시 호출되는 이벤트.
			 */
			function onBodyScreenChange( /* cpr.events.CScreenChangeEvent */ e) {
				var isBigScreen = e.screen.name == "default";
				app.lookup("rdb1").visible = isBigScreen;
				app.lookup("cmb1").visible = !isBigScreen;
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			app.declareBindableAppProperty("value", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var radioButton_1 = new cpr.controls.RadioButton("rdb1");
			radioButton_1.bind("value").toAppProperty("value");
			(function(radioButton_1){
			})(radioButton_1);
			container.addChild(radioButton_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			
			var comboBox_1 = new cpr.controls.ComboBox("cmb1");
			comboBox_1.bind("value").toAppProperty("value");
			(function(comboBox_1){
			})(comboBox_1);
			container.addChild(comboBox_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyScreenChange == "function"){
				app.addEventListener("screen-change", onBodyScreenChange);
			}
		}
	});
	
	// Type declaration for ComboOrRadio
	cpr.utils.Util.ensurePackage("udc").ComboOrRadio = function(id){
		cpr.controls.UDCBase.call(this, "udc.ComboOrRadio", internalApp, id);
	};
	
	udc.ComboOrRadio.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.ComboOrRadio.prototype, "type", {
		get : function(){
			return "udc.ComboOrRadio";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.ComboOrRadio.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	Object.defineProperty(udc.ComboOrRadio.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.ComboOrRadio
/// start - udc.DensityMap
/*
 * UDC Qualified Name: udc.DensityMap
 * App URI: udc/DensityMap
 * Source Location: udc/DensityMap.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/DensityMap", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onUIControlShellLoad( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var uIControlShell = e.control;
			
				/** @type HTMLDivElement */
				var rootDiv = e.content;
			
				whenStyleComputed(rootDiv, function() {
			
					var margin = {
						top: 25,
						right: 25,
						bottom: 25,
						left: 30
					};
			
					var xColName = app.getAppProperty("xColumn");
					var yColName = app.getAppProperty("yColumn");
			
					var width = parseInt(window.getComputedStyle(rootDiv).width);
					var height = parseInt(window.getComputedStyle(rootDiv).height);
			
					var x = d3.scaleLinear()
						.rangeRound([margin.left, width - margin.right]);
			
					var y = d3.scaleLinear()
						.rangeRound([height - margin.bottom, margin.top]);
			
					var svg = d3.select(rootDiv).append("svg");
					svg.style("position", "absolute");
					svg.attr("width", width);
					svg.attr("height", height);
			
					var faithful = getDataSet().getRowDataRanged().map(function(d) {
						return {
							x: +d[xColName],
							y: +d[yColName],
						}
					});
			
					x.domain(d3.extent(faithful, function(d) {
						return d.x;
					})).nice();
					y.domain(d3.extent(faithful, function(d) {
						return d.y;
					})).nice();
			
					svg.insert("g", "g")
						.attr("fill", "none")
						.attr("stroke", "steelblue")
						.attr("stroke-linejoin", "round")
						.selectAll("path")
						.data(d3.contourDensity()
							.x(function(d) {
								return x(d.x);
							})
							.y(function(d) {
								return y(d.y);
							})
							.size([width, height])
							.bandwidth(40)
							(faithful))
						.enter().append("path")
						.attr("d", d3.geoPath());
			
					svg.append("g")
						.attr("stroke", "white")
						.selectAll("circle")
						.data(faithful)
						.enter().append("circle")
						.attr("cx", function(d) {
							return x(d.x);
						})
						.attr("cy", function(d) {
							return y(d.y);
						})
						.attr("r", 2);
			
					svg.append("g")
						.attr("transform", "translate(0," + (height - margin.bottom) + ")")
						.call(d3.axisBottom(x))
						.select(".tick:last-of-type text")
						.select(function() {
							return this.parentNode.appendChild(this.cloneNode());
						})
						.attr("y", -3)
						.attr("dy", null)
						.attr("font-weight", "bold")
						.text(app.getAppProperty("xTitle"));
			
					svg.append("g")
						.attr("transform", "translate(" + margin.left + ",0)")
						.call(d3.axisLeft(y))
						.select(".tick:last-of-type text")
						.select(function() {
							return this.parentNode.appendChild(this.cloneNode());
						})
						.attr("x", 3)
						.attr("text-anchor", "start")
						.attr("font-weight", "bold")
						.text(app.getAppProperty("yTitle"));
				});
			
			}
			
			/**
			 * @return {cpr.data.DataSet}
			 */
			function getDataSet() {
				return app.getAppProperty("dataSet") || app.lookup("density");
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				app.getContainer().redraw();
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			app.declareBindableAppProperty("yTitle", "Y");
			app.declareBindableAppProperty("xTitle", "X");
			app.declareAppProperty("xColumn", "x");
			app.declareAppProperty("yColumn", "y");
			var dataSet_1 = new cpr.data.DataSet("density");
			dataSet_1.parseData({
				"columns": [
					{"name": "y"},
					{"name": "x"}
				],
				"rows": [
					{"y": "3.600", "x": "70"},
					{"y": "3.4", "x": "50"},
					{"y": "1.1", "x": "30"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell();
			if(typeof onUIControlShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onUIControlShellLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for DensityMap
	cpr.utils.Util.ensurePackage("udc").DensityMap = function(id){
		cpr.controls.UDCBase.call(this, "udc.DensityMap", internalApp, id);
	};
	
	udc.DensityMap.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.DensityMap.prototype, "type", {
		get : function(){
			return "udc.DensityMap";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.DensityMap.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	Object.defineProperty(udc.DensityMap.prototype, "yTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("yTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("yTitle", newValue, true);
		}
	});
	Object.defineProperty(udc.DensityMap.prototype, "xTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("xTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("xTitle", newValue, true);
		}
	});
	Object.defineProperty(udc.DensityMap.prototype, "xColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("xColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("xColumn", newValue, true);
		}
	});
	Object.defineProperty(udc.DensityMap.prototype, "yColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("yColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("yColumn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.DensityMap
/// start - udc.DynamicTable
/*
 * UDC Qualified Name: udc.DynamicTable
 * App URI: udc/DynamicTable
 * Source Location: udc/DynamicTable.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/DynamicTable", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var LoadingApp = new cpr.core.App("Loading", {
				onCreate: function( /* cpr.core.AppInstance*/ app) {
					app.getContainer().setLayout(new cpr.controls.layouts.FillLayout());
					var msg = new cpr.controls.Output("msg");
					msg.value = "Loading";
					app.getContainer().addChild(msg);
				}
			});
			
			function onBodyInit( /* cpr.events.CEvent */ e) {
				var viewPort = app.lookup("viewport");
				var layout = new cpr.controls.layouts.VerticalLayout();
				layout.distribution = "fill";
				layout.scrollable = true;
				viewPort.setLayout(layout);
			}
			
			function getDataSet() {
				/** @type cpr.data.DataSet */
				var dataSet = app.getAppProperty("dataSet");
				return dataSet;
			}
			
			function render() {
				var root = app.lookup("viewport");
			
				/**
				 * @type cpr.controls.EmbeddedApp[]
				 */
				var oldChildren = app.lookup("viewport").getChildren().slice(0);
				var rowHeight = app.getAppProperty("rowHeight");
				var dataSet = getDataSet();
				if (!dataSet) {
					return;
				}
			
				var count = dataSet.getRowCount();
				oldChildren.slice(count).forEach(function( /* cpr.controls.EmbeddedApp*/ it) {
					root.removeChild(it, true);
				});
			
				var idx = 0;
			
				for (idx = 0; idx < count; idx++) {
					(function(idx) {
						var row = dataSet.getRow(idx)
						var expectedAppURI = row.getValue("reuseId");
						var existing = oldChildren[idx];
						if (!existing) {
							existing = new cpr.controls.EmbeddedApp(null, LoadingApp);
							cpr.core.App.load(expectedAppURI, function(loadedApp) {
								existing.app = loadedApp;
							});
							root.addChild(existing, {
								height: rowHeight + "px"
							});
						} else if (existing.app != null && existing.app.id != expectedAppURI) {
							(function( /* cpr.controls.EmbeddedApp*/ embededApp) {
								cpr.core.App.load(expectedAppURI, function(loadedApp) {
									//						setTimeout(function(){
									embededApp.app = loadedApp;
									//						});
								});
							})(existing);
						}
			
						var explictHeight = row.getValue("height");
						if (explictHeight) {
							root.updateConstraint(existing, {
								height: explictHeight + "px"
							});
						}
						existing.setBindContext(new cpr.bind.DataRowContext(dataSet, idx));
					})(idx);
				}
			}
			
			function onBodyBeforeDraw( /* cpr.events.CUIEvent */ e) {
				render();
			}
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			app.declareAppProperty("rowHeight", 50);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("viewport");
			group_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"border-bottom-color" : "gray",
				"border-left-style" : "solid",
				"border-right-width" : "1px",
				"border-bottom-width" : "1px",
				"border-left-color" : "gray",
				"border-top-color" : "gray",
				"border-bottom-style" : "solid",
				"border-right-color" : "gray",
				"border-left-width" : "1px",
				"border-top-style" : "solid"
			});
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyBeforeDraw == "function"){
				app.getContainer().addEventListener("before-draw", onBodyBeforeDraw);
			}
		}
	});
	
	// Type declaration for DynamicTable
	cpr.utils.Util.ensurePackage("udc").DynamicTable = function(id){
		cpr.controls.UDCBase.call(this, "udc.DynamicTable", internalApp, id);
	};
	
	udc.DynamicTable.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.DynamicTable.prototype, "type", {
		get : function(){
			return "udc.DynamicTable";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.DynamicTable.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	Object.defineProperty(udc.DynamicTable.prototype, "rowHeight", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("rowHeight");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("rowHeight", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.DynamicTable
/// start - udc.PersonCard
/*
 * UDC Qualified Name: udc.PersonCard
 * App URI: udc/PersonCard
 * Source Location: udc/PersonCard.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/PersonCard", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			
			// Header
			app.declareBindableAppProperty("title", "이름");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-radius" : "10px",
				"border-bottom-width" : "1px",
				"border-right-style" : "solid",
				"background-color" : "white",
				"border-top-color" : "gray",
				"top" : "0px",
				"border-top-style" : "solid",
				"left" : "0px",
				"background-image" : "none",
				"border-left-width" : "1px",
				"border-left-style" : "solid",
				"border-bottom-color" : "gray",
				"border-right-color" : "gray",
				"border-bottom-style" : "solid",
				"border-left-color" : "gray",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var image_1 = new cpr.controls.Image();
			image_1.src = "2-Publish/images/mario.png";
			container.addChild(image_1, {
				"top": "10px",
				"width": "90px",
				"height": "120px",
				"left": "calc(50% - 45px)"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.style.css({
				"text-align" : "center"
			});
			output_1.bind("value").toAppProperty("title");
			container.addChild(output_1, {
				"right": "10px",
				"bottom": "3px",
				"left": "10px",
				"height": "20px"
			});
		}
	});
	
	// Type declaration for PersonCard
	cpr.utils.Util.ensurePackage("udc").PersonCard = function(id){
		cpr.controls.UDCBase.call(this, "udc.PersonCard", internalApp, id);
	};
	
	udc.PersonCard.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.PersonCard.prototype, "type", {
		get : function(){
			return "udc.PersonCard";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.PersonCard.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.PersonCard
/// start - udc.PopUpTextArea
/*
 * UDC Qualified Name: udc.PopUpTextArea
 * App URI: udc/PopUpTextArea
 * Source Location: udc/PopUpTextArea.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/PopUpTextArea", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * PopUpTextArea.js
			 * Created at 2018. 8. 8. 오전 10:50:52.
			 *
			 * @autohr jeeeyul
			 ************************************************/
			
			/** @type cpr.controls.TextArea */
			var knownTextArea;
			
			function disposeKnownTextAreaIfNeeded() {
				if (knownTextArea) {
					knownTextArea.dispose();
					knownTextArea = null;
				}
			}
			
			/**
			 * 줄바꿈 및 공백을 정리 하여 한 줄의 텍스트로 만듭니다.
			 * @param {String} text 정리할 문자열.
			 */
			function trimText(text) {
				return (text || "").replace(/[\r\n\s]+/g, " ");
			}
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function() {
				return trimText(app.getAppProperty("value"));
			};
			
			/*
			 * 그리드 편집모드에서, UDC 컨트롤을 그리기 직전에 호출 됩니다.
			 */
			function onBodyBeforeDraw( /* cpr.events.CUIEvent */ e) {
				// 아웃풋의 값을 앱 속성에서 가져와 넣습니다.
				app.lookup("output").value = trimText(app.getAppProperty("value"));
			}
			
			/*
			 * 아웃풋에서 click 이벤트 발생 시 호출.
			 */
			function onOutputClick( /* cpr.events.CMouseEvent */ e) {
				var output = e.control;
			
				disposeKnownTextAreaIfNeeded();
			
				// 텍스트 에리어를 만듭니다.
				var ta = new cpr.controls.TextArea();
				ta.autoSelect = false;
			
				//readOnly속성 전달받아 셋팅함 - 2018.08.10 dnsgml
				var vbReadOnly = app.getAppProperty("readOnly");
				ta.readOnly = vbReadOnly;
			
				// 현재 value 값을 텍스트 에리어에 넣습니다.
				ta.value = app.getAppProperty("value");
			
				// 텍스트 에리어를 표시할 위치 및 크기 를 잡습니다.
				var offset = output.getActualRect();
				ta.style.css({
					"position": "absolute",
					"left": offset.left + "px",
					"top": offset.top + offset.height + "px",
					"width": offset.width + "px",
					"min-width": "200px" /* 컬럼으 너무 좁을 경우를 대비 */ ,
					"height": "100px"
				});
			
				// 텍스트 에리어가 포커스를 잃으면 value를 수정하고, 텍스트 에리어를 파기 시킵니다.
				ta.addEventListenerOnce("blur", function(e) {
					console.log("blur");
					if (app.getAppProperty("value") != ta.value) {
						app.setAppProperty("value", ta.value, true);
					}
					ta.dispose();
				});
			
				// 텍스트 에리어를 플로팅 시킵니다.
				app.getRootAppInstance().floatControl(ta);
			
				// 포커스 지정.
				ta.focus();
			
				knownTextArea = ta;
			
				console.log("ta.uuid :: " + ta.uuid);
			}
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", "value");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("output");
			output_1.ellipsis = true;
			if(typeof onOutputClick == "function") {
				output_1.addEventListener("click", onOutputClick);
			}
			container.addChild(output_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyBeforeDraw == "function"){
				app.getContainer().addEventListener("before-draw", onBodyBeforeDraw);
			}
		}
	});
	
	// Type declaration for PopUpTextArea
	cpr.utils.Util.ensurePackage("udc").PopUpTextArea = function(id){
		cpr.controls.UDCBase.call(this, "udc.PopUpTextArea", internalApp, id);
	};
	
	udc.PopUpTextArea.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.PopUpTextArea.prototype, "type", {
		get : function(){
			return "udc.PopUpTextArea";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.PopUpTextArea.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.PopUpTextArea
/// start - udc.SegmentedButton
/*
 * UDC Qualified Name: udc.SegmentedButton
 * App URI: udc/SegmentedButton
 * Source Location: udc/SegmentedButton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/SegmentedButton", {
		onPrepare: function(loader){
			loader.addCSS("udc/segmented-button.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			function onBodyPropertyChange( /* cpr.events.CPropertyChangeEvent */ e) {
				render();
			}
			
			function createButton() {
				var btn = new cpr.controls.Button();
				btn.addEventListener("click", function(e) {
					var value = btn.userAttr("value");
					app.setAppProperty("value", value, true);
					var changeEvent = new cpr.events.CSelectionEvent("value-change", {
						newValue: value
					});
					app.dispatchEvent(changeEvent);
				});
				return btn;
			}
			
			function render() {
				if (!canRender()) {
					return;
				}
			
				var grp = app.lookup("group");
			
				/** @type cpr.data.DataCollection */
				var dataSet = app.getAppProperty("dataSet");
			
				var labelColumn = dataSet.getColumn(app.getAppProperty("labelColumn"));
				var valueColumn = dataSet.getColumn(app.getAppProperty("valueColumn"));
				var currentValue = app.getAppProperty("value");
			
				/** @type cpr.controls.layouts.FormLayout */
				var layout = grp.getLayout();
				var cols = [];
				var idx = 0;
				for (idx = 0; idx < dataSet.getRowCount(); idx++) {
					cols.push("1fr");
				}
				layout.setColumns(cols);
			
				/** @type cpr.controls.Button[] */
				var oldButtons = grp.getChildren();
			
				// removes unnecessary buttons
				oldButtons.splice(dataSet.getRowCount()).forEach(function( /* cpr.controls.Button */ it) {
					grp.removeChild(it, true);
				});
				
				for (idx = 0; idx < dataSet.getRowCount(); idx++) {
					(function(idx) {
						var btn = oldButtons[idx];
						if (!btn) {
							btn = createButton();
						}
						var eachLabel = labelColumn.getValue(idx);
						var eachValue = valueColumn.getValue(idx);
			
						btn.value = eachLabel;
						btn.userAttr("value", eachValue);
			
						if (eachValue == currentValue) {
							btn.style.addClass("cl-selected");
						} else {
							btn.style.removeClass("cl-selected");
						}
			
						if (btn.getParent() != grp) {
							grp.addChild(btn, {
								colIndex: idx
							});
						} else {
							grp.updateConstraint(btn, {
								colIndex: idx
							});
						}
					})(idx);
				}
			}
			
			function canRender() {
				/** @type cpr.data.DataCollection */
				var dataSet = app.getAppProperty("dataSet");
				if (dataSet instanceof cpr.data.DataCollection == false) {
					return false;
				}
			
				var labelColumn = dataSet.getColumn(app.getAppProperty("labelColumn"));
				if (!labelColumn) {
					return false;
				}
			
				var valueColumn = dataSet.getColumn(app.getAppProperty("valueColumn"));
				if (!valueColumn) {
					return false;
				}
			
				return true;
			}
			
			function onBodyBeforeDraw( /* cpr.events.CUIEvent */ e) {
				render();
			}
			
			/**
			 * the text which will be shown in grid with viewing mode.
			 */
			exports.getText = function() {
				if (!canRender()) {
					return "";
				}
				/** @type cpr.data.DataSet */
				var dataSet = app.getAppProperty("dataSet");
				var labelColumnName = app.getAppProperty("labelColumn");
				var currentValue = app.getAppProperty("value");
				var theRow = dataSet.findFirstRow("value == '" + currentValue + "'");
				if (theRow) {
					return theRow.getValue(labelColumnName);
				} else {
					""
				}
			};
			
			function onBodyInit(/* cpr.events.CEvent */ e){
				app.lookup("group").removeAllChildren(true);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			app.declareAppProperty("dataSet", null);
			app.declareAppProperty("labelColumn", "label");
			app.declareAppProperty("valueColumn", "value");
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("group");
			group_1.style.setClasses(["segmented-button"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "-1";
			formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "A";
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "B";
				button_2.style.setClasses(["cl-selected"]);
				container.addChild(button_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button();
				button_3.value = "C";
				container.addChild(button_3, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyBeforeDraw == "function"){
				app.getContainer().addEventListener("before-draw", onBodyBeforeDraw);
			}
		}
	});
	
	// Type declaration for SegmentedButton
	cpr.utils.Util.ensurePackage("udc").SegmentedButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.SegmentedButton", internalApp, id);
	};
	
	udc.SegmentedButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.SegmentedButton.prototype, "type", {
		get : function(){
			return "udc.SegmentedButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.SegmentedButton.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	Object.defineProperty(udc.SegmentedButton.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	Object.defineProperty(udc.SegmentedButton.prototype, "labelColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("labelColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("labelColumn", newValue, true);
		}
	});
	Object.defineProperty(udc.SegmentedButton.prototype, "valueColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("valueColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("valueColumn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.SegmentedButton
/// start - udc.SignPad
/*
 * UDC Qualified Name: udc.SignPad
 * App URI: udc/SignPad
 * Source Location: udc/SignPad.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/SignPad", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			var lastKnownPosition = null;
			
			/** @type HTMLCanvasElement */
			var canvas;
			
			/** @type CanvasRenderingContext2D */
			var gc;
			
			function updateLastKnownPosition( /* Event */ e) {
				lastKnownPosition = {
					x: e.offsetX,
					y: e.offsetY
				};
			}
			
			function onMouseDown(e) {
				updateLastKnownPosition(e);
			}
			
			function onMouseMove(e) {
				if (!lastKnownPosition) {
					return;
				}
				gc.beginPath();
				gc.moveTo(lastKnownPosition.x, lastKnownPosition.y);
				gc.lineTo(e.offsetX, e.offsetY);
				gc.lineCap = "round";
				gc.lineWidth = app.getAppProperty("strokeWidth");
				gc.stroke();
			
				updateLastKnownPosition(e);
			}
			
			function onMouseUp(e) {
				if (!lastKnownPosition) {
					return;
				}
				var gc = canvas.getContext("2d")
				gc.moveTo(lastKnownPosition.offsetX, lastKnownPosition.offsetY);
				gc.lineTo(e.offsetX, e.offsetY);
				gc.lineWidth = app.getAppProperty("strokeWidth");
				gc.lineCap = "round";
				gc.stroke();
				lastKnownPosition = null;
			}
			
			/*
			 * 쉘에서 init 이벤트 발생 시 호출.
			 */
			function onUIControlShellInit( /* cpr.events.CUIEvent */ e) {
				if (canvas) {
					canvas.removeEventListener("mousedown", onMouseDown);
					canvas.removeEventListener("mousemove", onMouseMove);
					canvas.removeEventListener("mouseup", onMouseUp);
					canvas = null;
					gc = null;
				}
			}
			
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onUIControlShellLoad( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var uIControlShell = e.control;
			
				whenStyleComputed(e.content, function() {
					var computedStyle = getComputedStyle(e.content);
					var width = parseInt(computedStyle.width);
					var height = parseInt(computedStyle.height);
			
					canvas = document.createElement("canvas");
					canvas.style.position = "absolute";
					canvas.style.left = "0px";
					canvas.style.top = "0px";
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
					canvas.width = width;
					canvas.height = height;
					e.content.appendChild(canvas);
			
					canvas.addEventListener("mousedown", onMouseDown);
					canvas.addEventListener("mousemove", onMouseMove);
					canvas.addEventListener("mouseup", onMouseUp);
			
					gc = canvas.getContext("2d");
				});
			}
			
			exports.getData = function() {
				if (canvas) {
					return canvas.toDataURL();
				} else {
					return null;
				}
			};
			
			exports.clear = function() {
				if (!canvas) {
					return;
				}
			
				gc.clearRect(0, 0, canvas.width, canvas.height);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("strokeWidth", 1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell();
			if(typeof onUIControlShellInit == "function") {
				uIControlShell_1.addEventListener("init", onUIControlShellInit);
			}
			if(typeof onUIControlShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onUIControlShellLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for SignPad
	cpr.utils.Util.ensurePackage("udc").SignPad = function(id){
		cpr.controls.UDCBase.call(this, "udc.SignPad", internalApp, id);
	};
	
	udc.SignPad.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.SignPad.prototype, "type", {
		get : function(){
			return "udc.SignPad";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.SignPad.prototype, "strokeWidth", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("strokeWidth");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("strokeWidth", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.SignPad
/// start - udc.TreeGraph
/*
 * UDC Qualified Name: udc.TreeGraph
 * App URI: udc/TreeGraph
 * Source Location: udc/TreeGraph.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/TreeGraph", {
		onPrepare: function(loader){
			loader.addCSS("udc/TreeGraph.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 */
			function onShellLoad( /* cpr.events.CUIEvent */ e) {
				/** 
				 * @type cpr.controls.UIControlShell
				 */
				var shell = e.control;
				
				whenStyleComputed(e.content, function(){
					render(e.content);
				});
			}
			
			function render(parent) {
				var comptued = window.getComputedStyle(parent);
				var width = parseInt(comptued.width);
				var height = parseInt(comptued.height);
			
				var data = getTreeData()[0];
				var root = d3.hierarchy(data);
				var tree = d3.tree()
					.size([height, width]);
			
				tree(root);
			
				var svg = d3.select(parent).append("svg");
				svg.style("position", "absolute");
				svg.attr("width", width);
				svg.attr("height", height);
				svg.attr("class", "tree-graph");
			
				var margin = {
					top: 0,
					right: 150,
					bottom: 0,
					left: 150
				};
			
				var xScale = d3.scaleLinear().domain([0, width]).range([margin.left, width - margin.right]);
				var yScale = d3.scaleLinear().domain([0, height]).range([margin.top, height - margin.bottom]);
				
				var g = svg.append("g");
				var link = g.selectAll(".link")
					.data(root.descendants().slice(1))
					.enter()
					.append("path")
					.attr("class", "link")
					.attr("d", function(d) {
						return "M" + xScale(d.y) + "," + yScale(d.x) +
							"C" + xScale(d.parent.y + 100) + "," + yScale(d.x) +
							" " + xScale(d.parent.y + 100) + "," + yScale(d.parent.x) +
							" " + xScale(d.parent.y) + "," + yScale(d.parent.x);
					});
			
				var node = g.selectAll(".node")
					.data(root.descendants())
					.enter()
					.append("g")
					.attr("class", "node")
					.attr("transform", function(d) {
						return "translate(" + xScale(d.y) + "," + yScale(d.x) + ")";
					})
			
				node.append("circle")
					.attr("r", 8)
					.attr("fill", "#999");
			
				node.append("text")
					.attr("dy", 3)
					.attr("x", function(d) {
						return d.children ? -12 : 12;
					})
					.style("text-anchor", function(d) {
						return d.children ? "end" : "start";
					})
					.attr("font-size", "100%")
					.text(function(d) {
						return d.data.name;
					});
			}
			
			function getTreeData() {
				/** @type cpr.data.DataSet */
				var ds = app.getAppProperty("dataSet") || app.lookup("dataSet");
				var labelColumn = app.getAppProperty("labelColumn");
				var valueColumn = app.getAppProperty("valueColumn");
				var parentColumn = app.getAppProperty("parentColumn");
			
				var data = ds.getRowDataRanged().map(function(each) {
					return {
						name: each[labelColumn],
						value: each[valueColumn],
						parent: each[parentColumn]
					};
				});
			
				var result = [];
			
				data.forEach(function( /* cpr.data.RowConfigInfo */ each) {
					var parentValue = each["parent"];
					if (!parentValue) {
						result.push(each);
					} else {
						var foundParent = data.some(function( /* cpr.data.RowConfigInfo */ it) {
							if (it["value"] == parentValue) {
								it.children = it.children || [];
								it.children.push(each);
								return true;
							}
							return false;
						});
						if (!foundParent) {
							result.push(each);
						}
					}
				});
			
				return result;
			}
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				app.lookup("shell").redraw();
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("dataSet", null);
			app.declareAppProperty("labelColumn", "label");
			app.declareAppProperty("valueColumn", "value");
			app.declareAppProperty("parentColumn", "parent");
			var dataSet_1 = new cpr.data.DataSet("dataSet");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"},
					{"name": "parent"}
				],
				"rows": [{"label": "토마토 시스템", "value": "tomato_system"}]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("shell");
			if(typeof onShellLoad == "function") {
				uIControlShell_1.addEventListener("load", onShellLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for TreeGraph
	cpr.utils.Util.ensurePackage("udc").TreeGraph = function(id){
		cpr.controls.UDCBase.call(this, "udc.TreeGraph", internalApp, id);
	};
	
	udc.TreeGraph.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.TreeGraph.prototype, "type", {
		get : function(){
			return "udc.TreeGraph";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.TreeGraph.prototype, "dataSet", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("dataSet");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("dataSet", newValue, true);
		}
	});
	Object.defineProperty(udc.TreeGraph.prototype, "labelColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("labelColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("labelColumn", newValue, true);
		}
	});
	Object.defineProperty(udc.TreeGraph.prototype, "valueColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("valueColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("valueColumn", newValue, true);
		}
	});
	Object.defineProperty(udc.TreeGraph.prototype, "parentColumn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("parentColumn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("parentColumn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.TreeGraph
/// start - udc.Twitter
/*
 * UDC Qualified Name: udc.Twitter
 * App URI: udc/Twitter
 * Source Location: udc/Twitter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/Twitter", {
		onPrepare: function(loader){
			loader.addCSS("udc/segmented-button.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * "@" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick( /* cpr.events.CMouseEvent */ e) {
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				app.lookup("ipb1").value = "";
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["segmented-button"]);
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.horizontalSpacing = "-1";
			formLayout_1.setColumns(["25px", "1fr", "80px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "@";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var inputBox_1 = new cpr.controls.InputBox("ipb1");
				inputBox_1.style.css({
					"background-color" : "white",
					"background-image" : "none"
				});
				inputBox_1.bind("value").toAppProperty("value");
				container.addChild(inputBox_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "Search";
				container.addChild(button_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for Twitter
	cpr.utils.Util.ensurePackage("udc").Twitter = function(id){
		cpr.controls.UDCBase.call(this, "udc.Twitter", internalApp, id);
	};
	
	udc.Twitter.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.Twitter.prototype, "type", {
		get : function(){
			return "udc.Twitter";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.Twitter.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.Twitter
