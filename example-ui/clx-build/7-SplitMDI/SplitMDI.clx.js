/*
 * App URI: 7-SplitMDI/SplitMDI
 * Source Location: 7-SplitMDI/SplitMDI.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("7-SplitMDI/SplitMDI", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/** @type cpr.controls.MDIFolder */
			var rightMDI = null;
			
			/**
			 * 왼쪽 MDI의 선택된 아이템을 우측 MDI로 보냅니다.
			 */
			function moveToRight() {
				var leftMDI = app.lookup("leftMDI");
			
				if (leftMDI.getSelectedTabItem()) {
					var rightMDI = ensureRightMDI();
					moveItem(leftMDI, rightMDI, leftMDI.getSelectedTabItem());
				}
			}
			
			/**
			 * 우측 MDI의 선택된 아이템을 좌측 MDI로 보냅니다.
			 */
			function moveToLeft() {
				if(!rightMDI){
					return;
				}
				
				var leftMDI = app.lookup("leftMDI");
			
				if (rightMDI.getSelectedTabItem()) {
					moveItem(rightMDI, leftMDI, rightMDI.getSelectedTabItem());
				}
			}
			
			/**
			 * 왼쪽 또는 오른쪽 MDI가 비어있는 경우, 모든 아이템을 왼쪽으로 옮기고 우측 MDI를 제거합니다.
			 */
			function collapseIfNeeded() {
				// 우측 MDI가 만들어진 적이 없음.
				if (!rightMDI) {
					return;
				}
				
				var leftMDI = app.lookup("leftMDI");
				// 양쪽 모두 아이템이 존재한다면, 컬렙스 하지 않음.
				if (rightMDI.getTabItems().length > 0 && leftMDI.getTabItems().length > 0) {
					return;
				}
			
				// 우측의 모든 아이템을 좌측으로 옮김.
				rightMDI.getTabItems().forEach(function( /* cpr.controls.TabItem */ each) {
					rightMDI.removeTabItem(each);
					leftMDI.addTabItem(each);
				});
			
				// 폼 레이아웃에서 우측 컬럼을 제거.
				var grp = app.lookup("mdiGroup");
			
				/** @type cpr.controls.layouts.FormLayout */
				var layout = grp.getLayout();
				layout.setColumns(["1fr"]);
				
				// 버튼 그룹의 콜스팬을 2 -> 1로 변경.
				var buttonGroup = app.lookup("buttonGroup");
				grp.updateConstraint(buttonGroup, {
					colSpan: 1
				});
				
				// 우측 MDI 제거.
				grp.removeChild(rightMDI, true);
				rightMDI = null;
				
				updateButtonEnabilities();
			}
			
			/**
			 * 우측 MDI폴더를 얻습니다. 이미 존재하는 경우, 존재하는 MDI폴더가 리턴되고,
			 * 존재하지 않는 경우, 새로 만든 뒤에 리턴합니다.
			 * @return {cpr.controls.MDIFolder}
			 */
			function ensureRightMDI() {
				if (rightMDI == null) {
					var grp = app.lookup("mdiGroup");
			
					// 동적으로 폼 레이아웃 컬럼 추가.
					/** @type cpr.controls.layouts.FormLayout */
					var layout = grp.getLayout();
					layout.setColumns(["1fr", "1fr"]);
			
					// 버튼 그룹의 콜스팬 변경.
					var buttonGroup = app.lookup("buttonGroup");
					grp.updateConstraint(buttonGroup, {
						colSpan: 2
					});
			
					// 우측에 MDI 폴더 추가.
					rightMDI = new cpr.controls.MDIFolder("rightMDI");
					rightMDI.addEventListener("selection-change", function(e){
						updateButtonEnabilities();
					});
					grp.addChild(rightMDI, {
						rowIndex: 1,
						colIndex: 1
					});
				}
				return rightMDI;
			}
			
			/**
			 * 특정 탭 아이템을 다른 탭폴더로 이동합니다.
			 * 
			 * @param {cpr.controls.MDIFolder} folderFrom 
			 * 		이동할 탭 아이템을 소유한 탭 폴더.
			 * 
			 * @param {cpr.controls.MDIFolder} folderTo 
			 * 		아이템을 보낼 탭 폴더.
			 * 
			 * @param {cpr.controls.TabItem} itemToMove 
			 * 		보낼 아이템.
			 */
			function moveItem(folderFrom, folderTo, itemToMove) {
				if (!itemToMove) {
					return;
				}
				var selectedIndex = folderFrom.getTabItems().indexOf(itemToMove);
				folderFrom.removeTabItem(itemToMove);
			
				var newIndex = Math.min(folderFrom.getTabItems().length - 1, selectedIndex);
				if (newIndex >= 0) {
					folderFrom.setSelectedTabItem(folderFrom.getTabItems()[newIndex]);
				}
			
				folderTo.addTabItem(itemToMove);
				
				collapseIfNeeded();
				
				updateButtonEnabilities();
				
				app.getContainer().redraw();
			}
			
			/**
			 * 좌우측으로 보내기 버튼의 가용성을 업데이트합니다.
			 */
			function updateButtonEnabilities(){
				app.lookup("toRightBtn").enabled = app.lookup("leftMDI").getSelectedTabItem() != null;
			
				if(!rightMDI){
					app.lookup("toLeftBtn").enabled = false;
				}else{
					app.lookup("toLeftBtn").enabled = rightMDI.getSelectedTabItem() != null;
				}
			}
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container("mdiGroup");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["25px", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var mDIFolder_1 = new cpr.controls.MDIFolder("leftMDI");
				
				var tabItem_1 = (function(tabFolder){
					var tabItem_1 = new cpr.controls.TabItem();
					tabItem_1.text = "SubA";
					var embeddedApp_1 = new cpr.controls.EmbeddedApp();
					cpr.core.App.load("7-SplitMDI/SubA", function(app) {
						if(app){
							embeddedApp_1.app = app;
						}
					});
					tabItem_1.content = embeddedApp_1;
					return tabItem_1;
				})(mDIFolder_1);
				mDIFolder_1.addTabItem(tabItem_1);
				
				var tabItem_2 = (function(tabFolder){
					var tabItem_2 = new cpr.controls.TabItem();
					tabItem_2.text = "SubB";
					var embeddedApp_2 = new cpr.controls.EmbeddedApp();
					cpr.core.App.load("7-SplitMDI/SubB", function(app) {
						if(app){
							embeddedApp_2.app = app;
						}
					});
					tabItem_2.content = embeddedApp_2;
					return tabItem_2;
				})(mDIFolder_1);
				mDIFolder_1.addTabItem(tabItem_2);
				
				var tabItem_3 = (function(tabFolder){
					var tabItem_3 = new cpr.controls.TabItem();
					tabItem_3.text = "SubC";
					var embeddedApp_3 = new cpr.controls.EmbeddedApp();
					cpr.core.App.load("7-SplitMDI/SubC", function(app) {
						if(app){
							embeddedApp_3.app = app;
						}
					});
					tabItem_3.content = embeddedApp_3;
					return tabItem_3;
				})(mDIFolder_1);
				mDIFolder_1.addTabItem(tabItem_3);
				mDIFolder_1.setSelectedTabItem(tabItem_1);
				if(typeof updateButtonEnabilities == "function") {
					mDIFolder_1.addEventListener("selection-change", updateButtonEnabilities);
				}
				container.addChild(mDIFolder_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var group_2 = new cpr.controls.Container("buttonGroup");
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.setColumns(["1fr", "1fr"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var button_1 = new cpr.controls.Button("toLeftBtn");
					button_1.value = "<<";
					if(typeof moveToLeft == "function") {
						button_1.addEventListener("click", moveToLeft);
					}
					container.addChild(button_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var button_2 = new cpr.controls.Button("toRightBtn");
					button_2.value = ">>";
					if(typeof moveToRight == "function") {
						button_2.addEventListener("click", moveToRight);
					}
					container.addChild(button_2, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0,
					"horizontalAlign": "right"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "40px",
				"right": "40px",
				"bottom": "40px",
				"left": "40px"
			});
			if(typeof updateButtonEnabilities == "function"){
				app.addEventListener("init", updateButtonEnabilities);
			}
		}
	});
	app.title = "SplitMDI";
	cpr.core.Platform.INSTANCE.register(app);
})();
