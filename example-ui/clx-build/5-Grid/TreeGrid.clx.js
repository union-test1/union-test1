/*
 * App URI: 5-Grid/TreeGrid
 * Source Location: 5-Grid/TreeGrid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("5-Grid/TreeGrid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			cpr.expression.ExpressionEngine.INSTANCE.registerFunction("computeLevel", computeLevel);
			cpr.expression.ExpressionEngine.INSTANCE.registerFunction("computeChildSum", computeChildSum);
			
			/**
			 * rowId를 이용하여 트리 level을 계산합니다.
			 * parentId를 따라 부모 로우을 탐색하여 개수를 센 뒤 반환합니다.
			 * 
			 * @param {String} rowId
			 */
			function computeLevel( /* String */ rowId) {
				var row = findRowWithId(rowId);
				if (!row) {
					return 1;
				}
			
				var level = 1;
				var parentId = row.getValue("parentId");
				while (parentId) {
					level++;
					row = findRowWithId(parentId);
					parentId = row.getValue("parentId");
				}
			
				return level;
			}
			
			/**
			 * 자기 자신 및 자식 로우의 특정 컬럼의 총합을 구합니다.
			 * @param {String} rowId 총합을 구할 부모 로우의 ID.
			 * @param {String} colName 총합계산에 사용할 컬럼 명.
			 */
			function computeChildSum(rowId, colName) {
				if (!rowId) {
					return 0;
				}
			
				var selfValue = Number(findRowWithId(rowId).getValue(colName));
				return getAllChildRows(rowId).map(function( /* cpr.data.Row */ each) {
					return Number(each.getValue(colName));
				}).reduce(function( /* typeA */ a, /* typeA */ b) {
					return a + b;
				}, selfValue);
			}
			
			/**
			 * 특정 로우의 모든 재귀적 자식 로우들을 얻습니다. (자기 자신은 포함하지 않습니다.)
			 * @param rowId 자식들을 얻을 row의 id.
			 */
			function getAllChildRows(rowId) {
				/** @type cpr.data.Row[] */
				var result = [];
				var ds = app.lookup("ds1");
			
				ds.findAllRow("parentId == '" + rowId + "'").forEach(function( /* cpr.data.Row */ each) {
					result.push(each);
					var eachChildrens = getAllChildRows(each.getValue("id"));
					result = result.concat(eachChildrens)
				});
			
				return result;
			}
			
			/**
			 * rowId로 row를 찾습니다.
			 * @param {String} rowId 찾을 row의 id.
			 */
			function findRowWithId(rowId) {
				var ds = app.lookup("ds1");
				var row = ds.findFirstRow("id == '" + rowId + "'");
				return row;
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "id"},
					{"name": "parentId"},
					{
						"name": "level",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "computeLevel(id)"
					},
					{"name": "name"},
					{
						"name": "score",
						"dataType": "number"
					}
				],
				"rows": [
					{"level": "1", "name": "맥스웰", "id": "1", "score": "90"},
					{"level": "2", "name": "뉴턴", "id": "2", "parentId": "1", "score": "100"},
					{"level": "3", "name": "허블", "id": "3", "parentId": "1", "score": "80"},
					{"level": "4", "name": "에릭 감마", "id": "4", "parentId": "3", "score": "40"},
					{"id": "5", "parentId": "", "level": "level5", "name": "스티브 잡스", "score": "30"},
					{"id": "6", "parentId": "5", "level": "level6", "name": "폰 노이만", "score": "40"},
					{"id": "7", "parentId": "6", "level": "level7", "name": "라이너스 폴링", "score": "70"},
					{"id": "8", "parentId": "6", "level": "level8", "name": "아인슈타인", "score": "55"},
					{"id": "9", "parentId": "5", "level": "level9", "name": "베그너", "score": "65"},
					{"id": "10", "parentId": "9", "level": "level10", "name": "퀴리", "score": "22"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"collapsible": true,
				"columns": [
					{"width": "132px"},
					{"width": "132px"},
					{"width": "132px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.text = "이름";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.text = "점수";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.text = "합계(자신 및 모든 자식)";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "name";
								cell.control = (function(){
									var treeCell_1 = new cpr.controls.gridpart.renderer.TreeCell();
									treeCell_1.bind("level").toDataColumn("level");
									treeCell_1.bind("value").toDataColumn("name");
									return treeCell_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1, "rowSpan": 1, "colSpan": 1},
							"configurator": function(cell){
								cell.columnName = "score";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor();
									numberEditor_1.format = "000,000,000";
									numberEditor_1.style.css({
										"text-align" : "right"
									});
									numberEditor_1.style.bind("color").toExpression([
										"switch(score){",
										"\twhen it >= 90 : \"green\"",
										"\twhen it >= 70 : \"orange\"",
										"\tdefault : \"red\"",
										"}"
									].join("\n"));
									numberEditor_1.bind("value").toDataColumn("score");
									return numberEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.control = (function(){
									var numberEditor_2 = new cpr.controls.NumberEditor();
									numberEditor_2.readOnly = true;
									numberEditor_2.format = "000,000,000";
									numberEditor_2.style.css({
										"text-align" : "right"
									});
									numberEditor_2.bind("value").toExpression("computeChildSum(id, \"score\")");
									return numberEditor_2;
								})();
							}
						}
					]
				}
			});
			container.addChild(grid_1, {
				"top": "50px",
				"right": "40px",
				"bottom": "40px",
				"left": "40px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "트리 그리드 예시";
			container.addChild(button_1, {
				"top": "20px",
				"left": "40px",
				"width": "313px",
				"height": "20px"
			});
		}
	});
	app.title = "TreeGrid";
	cpr.core.Platform.INSTANCE.register(app);
})();
