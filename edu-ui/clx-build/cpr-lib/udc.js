/// start - udc.GridButtons
/*
 * UDC Qualified Name: udc.GridButtons
 * App URI: udc/GridButtons
 * Source Location: udc/GridButtons.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/GridButtons", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			/*
			 * "추가" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnAddClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				//UDC의 속성 값(gridId)을 가져옴
				var gridId = app.getAppProperty("gridId");
				if (gridId != null) {
					//해당 UDC를 호출한 appInstance을 가져옴
					var hostApp = app.getHostAppInstance();
					
					// 선택된 Row 기준 뒤에 추가
					// 선택된 Row가 없을 경우 맨 앞에 추가
					/** @type cpr.controls.Grid */
					var grid = hostApp.lookup(gridId);
					var selectedRowIdx = grid.getSelectedRowIndices()[0]; //배열형태
					var rowIndex = 0;
					if (selectedRowIdx) {
						rowIndex = selectedRowIdx;
						grid.insertRow(rowIndex, true); //기준 행 아래에 행 추가
					}else {
						grid.insertRow(0, false); //기준 행 위에 행 추가
					}
				}
			
				//해당 이름으로 CUI Event 생성해 디스패치 (일종의 연결)
				var event = new cpr.events.CUIEvent("add");
				app.dispatchEvent(event);
			}
			
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDelClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				//UDC의 속성 값(gridId)을 가져옴
				var gridId = app.getAppProperty("gridId");
				if (gridId != null) {
					//해당 UDC를 호출한 appInstance을 가져옴
					var hostApp = app.getHostAppInstance();
					
					/** @type cpr.controls.Grid */
					var grid = hostApp.lookup(gridId);
					//체크표시한 행 삭제
					var checkIndices = grid.getCheckRowIndices();
					if (checkIndices != null && checkIndices.length > 0) {
						var len = checkIndices.length;
						for (var i = (len - 1); i >= 0; i--) {
							var rowindex = checkIndices[i];
							grid.deleteRow(rowindex);
						}
					} else {
						// 메세지 : 삭제할 데이터를 먼저 선택하여 주십시오.
						cpr.core.NotificationCenter.INSTANCE.post("app-msg", {
							"warning" : true,
							msg : "삭제할 데이터를 먼저 선택하여 주십시오."
						});
					}
				}
				
				//해당 이름으로 CUI Event 생성해 디스패치 (일종의 연결)
				var event = new cpr.events.CUIEvent("delete");
				app.dispatchEvent(event);
			}
			
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSaveClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				//해당 이름으로 CUI Event 생성해 디스패치 (일종의 연결)
				var event = new cpr.events.CUIEvent("save");
				app.dispatchEvent(event);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("gridId", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnAdd");
				button_1.value = "추가";
				if(typeof onBtnAddClick == "function") {
					button_1.addEventListener("click", onBtnAddClick);
				}
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button("btnDel");
				button_2.value = "삭제";
				if(typeof onBtnDelClick == "function") {
					button_2.addEventListener("click", onBtnDelClick);
				}
				container.addChild(button_2, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button("btnSave");
				button_3.value = "저장";
				if(typeof onBtnSaveClick == "function") {
					button_3.addEventListener("click", onBtnSaveClick);
				}
				container.addChild(button_3, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
		}
	});
	
	// Type declaration for GridButtons
	cpr.utils.Util.ensurePackage("udc").GridButtons = function(id){
		cpr.controls.UDCBase.call(this, "udc.GridButtons", internalApp, id);
	};
	
	udc.GridButtons.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.GridButtons.prototype, "type", {
		get : function(){
			return "udc.GridButtons";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.GridButtons.prototype, "gridId", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("gridId");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("gridId", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.GridButtons
/// start - udc.SearchButton
/*
 * UDC Qualified Name: udc.SearchButton
 * App URI: udc/SearchButton
 * Source Location: udc/SearchButton.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/SearchButton", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			
			/*
			 * Body에서 property-change 이벤트 발생 시 호출.
			 * 앱의 속성이 변경될 때 발생하는 이벤트 입니다.
			 */
			function onBodyPropertyChange(/* cpr.events.CPropertyChangeEvent */ e){
				if(e.property == "value"){
					app.lookup("ipbSearch").redraw();
				}
			}
			
			
			/*
			 * "" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnSearchClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				//해당 이름의 이벤트 생성 후 이벤트 전달
				var event = new cpr.events.CUIEvent("search");
				app.dispatchEvent(event);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("placeholder", null);
			app.declareBindableAppProperty("value", null);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "25px"]);
			formLayout_1.setRows(["1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button("btnSearch");
				button_1.value = "";
				if(typeof onBtnSearchClick == "function") {
					button_1.addEventListener("click", onBtnSearchClick);
				}
				container.addChild(button_1, {
					"colIndex": 1,
					"rowIndex": 0,
					"horizontalAlign": "center",
					"verticalAlign": "center",
					"width": 25
				});
				var inputBox_1 = new cpr.controls.InputBox("ipbSearch");
				inputBox_1.bind("placeholder").toAppProperty("placeholder");
				inputBox_1.bind("value").toAppProperty("value");
				container.addChild(inputBox_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyPropertyChange == "function"){
				app.addEventListener("property-change", onBodyPropertyChange);
			}
		}
	});
	
	// Type declaration for SearchButton
	cpr.utils.Util.ensurePackage("udc").SearchButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.SearchButton", internalApp, id);
	};
	
	udc.SearchButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.SearchButton.prototype, "type", {
		get : function(){
			return "udc.SearchButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.SearchButton.prototype, "placeholder", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("placeholder");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("placeholder", newValue, true);
		}
	});
	Object.defineProperty(udc.SearchButton.prototype, "value", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("value");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("value", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.SearchButton
