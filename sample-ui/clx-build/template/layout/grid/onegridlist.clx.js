/*
 * App URI: template/layout/grid/onegridlist
 * Source Location: template/layout/grid/onegridlist.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("template/layout/grid/onegridlist", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			// 공통 Util
			var comUtil = createComUtil(app);
			
			/*
			 * "검색" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				// 화면 조회
				doSearch();
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출. 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrp_search_condKeydown(/* cpr.events.CKeyboardEvent */e) {
				/**
				 * @type cpr.controls.Container
				 */
				var grp_search_cond = e.control;
			
				// 검색부에서 Enter Key가 입력되면 자동 조회
				if (e.keyCode == cpr.events.KeyCode.ENTER) {
					// 화면 조회
					doSearch();
				}
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출. 통신이 성공하면 발생합니다.
			 */
			function onSubListSubmitSuccess(/* cpr.events.CSubmissionEvent */e) {
				/**
				 * @type cpr.protocols.Submission
				 */
				var subList = e.control;
			
				// 서버로부터 전달된 메시지가 있을 경우 메시지를 출력
				var message = subList.getMetadata("msg");
				if (message) {
					comUtil.alert(message);
				}
			
				// 메인 그리드를 redraw
				var grdMain = app.lookup("grdMain");
				grdMain.redraw();
			
				if (grdMain.rowCount > 0) {
					// 첫번째 row 선택
					grdMain.selectRows([ 0 ]);
				}
			}
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				// 목록 저장
				doSave();
			}
			
			/*
			 * "Export" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
			
				// Excel Export
				comUtil.exportExcel("grdMain", "원그리드 조회");
			}
			
			/*
			 * "초기화" 버튼에서 click 이벤트 발생 시 호출. 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */e) {
				/**
				 * @type cpr.controls.Button
				 */
				var button = e.control;
			
				// 변경 데이터 체크
				if (comUtil.isUpdated("resList") == true) {
					var isOk = confirm("변경된 정보가 있습니다. 저장하시겠습니까?");
					;
					if (isOk == true) {
						doSave();
						return;
					}
				}
			
				/** 화면 초기화 */
				// 검색조건 초기화
				var reqKey = app.lookup("reqKey")
				reqKey.reset();
				var grp_search_cond = app.lookup("grp_search_cond");
				grp_search_cond.redraw();
			
				// 목록 초기화
				var resList = app.lookup("resList");
				resList.clear();
				var grdMain = app.lookup("grdMain");
				grdMain.redraw();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출. 통신이 성공하면 발생합니다.
			 */
			function onSubSaveSubmitSuccess(/* cpr.events.CSubmissionEvent */e) {
				/**
				 * @type cpr.protocols.Submission
				 */
				var subSave = e.control;
			
				// 서버로부터 전달된 메시지가 있을 경우 메시지를 출력
				var message = subSave.getMetadata("msg");
				if (message) {
					comUtil.alert(message);
				}
			
				// 화면 재조회
				doSearch();
			}
			
			/*
			 * 화면 검색 Function
			 */
			function doSearch() {
				// validation 검색 조건 입력 검증.
				var isValid = comUtil.validate("grp_search_cond");
				if (isValid == false) {
					return;
				}
			
				// 조회 Submission send
				comUtil.send("subMainList");
			}
			
			/*
			 * 메인 저장 Function
			 */
			function doSave() {
				// 변경 여부 확인
				if (comUtil.isUpdated("resList") == false) {
					comUtil.alert("변경된 정보가 없습니다.");
					return;
				}
			
				// Validation 편집 중인 Row의 체크
				var isValid = comUtil.validate("grdMain");
				if (isValid == false) {
					// 검증 실패 시 처리 중단
					return;
				}
			
				// 저장 Submission send
				comUtil.send("subSave");
			}
			
			/*
			 * 그리드에서 before-editrow-change 이벤트 발생 시 호출. Grid의 edit row가 변경되기 전에 발생하는 이벤트 입니다.
			 */
			function onGrdMainBeforeEditrowChange(/* cpr.events.CGridEvent */e) {
				/**
				 * @type cpr.controls.Grid
				 */
				var grdMain = e.control;
			
				// 편집 취소일 경우 스킵
				if (e.isCommit == false) {
					return;
				}
			
				// Validation 편집 중인 Row의 체크
				var isValid = comUtil.validate("grdMain");
				if (isValid == false) {
					e.preventDefault();
					return;
				}
			}
			
			/*
			 * 사용자 정의 컨트롤에서 insert 이벤트 발생 시 호출.
			 */
			function onButton_gridInsert(/* cpr.events.CUIEvent */e) {
				/**
				 * @type udc.button_grid
				 */
				var button_grid = e.control;
			
				// 그리드 row insert
				var rowIndex = comUtil.insertGridRow("grdMain");
			
				// 입력 가능한 첫 번째 셀에 포커스
				app.lookup("grdMain").focusCell(rowIndex, 1);
			}
			
			/*
			 * 사용자 정의 컨트롤에서 delete 이벤트 발생 시 호출.
			 */
			function onButton_gridDelete(/* cpr.events.CUIEvent */e) {
				/**
				 * @type udc.button_grid
				 */
				var button_grid = e.control;
			
				// 그리드 선택된 row 삭제
				comUtil.deleteGridRow("grdMain");
			}
			
			/*
			 * 사용자 정의 컨트롤에서 reset 이벤트 발생 시 호출.
			 */
			function onButton_gridReset(/* cpr.events.CUIEvent */e) {
				/**
				 * @type udc.button_grid
				 */
				var button_grid = e.control;
			
				// 그리드 선택된 row undo
				comUtil.revertGridRow("grdMain");
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			var dataSet_1 = new cpr.data.DataSet("resList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("reqKey");
			dataMap_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subMainList");
			submission_1.action = "../template/onegridlist/getMainList.do";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubListSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subSave");
			submission_2.action = "../template/onegridlist/save.do";
			submission_2.addRequestData(dataSet_1);
			if(typeof onSubSaveSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSubSaveSubmitSuccess);
			}
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "main");
			app.supportMedia("all and (max-width: 1023px)", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.pagetitle();
			userDefinedControl_1.bind("title").toAppProperty("title");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "24px"
			});
			
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["100px", "1fr", "11px", "40px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grp_search_cond");
				group_2.style.setClasses(["grp-search"]);
				var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
				group_2.setBindContext(dataMapContext_1);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.setColumns(["70px", "130px", "70px", "130px", "70px", "130px", "1fr", "90px"]);
				formLayout_2.setRows(["1fr", "1fr", "1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "column1";
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "column2";
					container.addChild(output_2, {
						"colIndex": 2,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "column3";
					container.addChild(output_3, {
						"colIndex": 4,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "column4";
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "column5";
					container.addChild(output_5, {
						"colIndex": 2,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_6 = new cpr.controls.Output();
					output_6.value = "column6";
					container.addChild(output_6, {
						"colIndex": 4,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_7 = new cpr.controls.Output();
					output_7.value = "column7";
					container.addChild(output_7, {
						"colIndex": 0,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_8 = new cpr.controls.Output();
					output_8.value = "column8";
					container.addChild(output_8, {
						"colIndex": 2,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var output_9 = new cpr.controls.Output();
					output_9.value = "column9";
					container.addChild(output_9, {
						"colIndex": 4,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipb1");
					inputBox_1.userAttr({
						"required": "Y",
						"name": "컬럼1"
					});
					inputBox_1.style.setClasses(["required"]);
					var dataMapContext_2 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
					inputBox_1.setBindContext(dataMapContext_2);
					inputBox_1.bind("value").toDataColumn("column1");
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_2 = new cpr.controls.InputBox("ipb2");
					var dataMapContext_3 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
					inputBox_2.setBindContext(dataMapContext_3);
					inputBox_2.bind("value").toDataColumn("column2");
					container.addChild(inputBox_2, {
						"colIndex": 3,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_3 = new cpr.controls.InputBox("ipb3");
					var dataMapContext_4 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
					inputBox_3.setBindContext(dataMapContext_4);
					inputBox_3.bind("value").toDataColumn("column3");
					container.addChild(inputBox_3, {
						"colIndex": 5,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_4 = new cpr.controls.InputBox("ipb4");
					inputBox_4.bind("value").toDataColumn("column4");
					container.addChild(inputBox_4, {
						"colIndex": 1,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_5 = new cpr.controls.InputBox("ipb5");
					inputBox_5.bind("value").toDataColumn("column5");
					container.addChild(inputBox_5, {
						"colIndex": 3,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_6 = new cpr.controls.InputBox("ipb6");
					inputBox_6.bind("value").toDataColumn("column6");
					container.addChild(inputBox_6, {
						"colIndex": 5,
						"rowIndex": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_7 = new cpr.controls.InputBox("ipb7");
					inputBox_7.bind("value").toDataColumn("column7");
					container.addChild(inputBox_7, {
						"colIndex": 1,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_8 = new cpr.controls.InputBox("ipb8");
					inputBox_8.bind("value").toDataColumn("column8");
					container.addChild(inputBox_8, {
						"colIndex": 3,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var inputBox_9 = new cpr.controls.InputBox("ipb9");
					inputBox_9.bind("value").toDataColumn("column9");
					container.addChild(inputBox_9, {
						"colIndex": 5,
						"rowIndex": 2,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "초기화";
					if(typeof onButtonClick5 == "function") {
						button_1.addEventListener("click", onButtonClick5);
					}
					container.addChild(button_1, {
						"colIndex": 7,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1,
						"verticalAlign": "fill"
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "검색";
					if(typeof onButtonClick == "function") {
						button_2.addEventListener("click", onButtonClick);
					}
					container.addChild(button_2, {
						"colIndex": 7,
						"rowIndex": 2,
						"verticalAlign": "fill"
					});
				})(group_2);
				if(typeof onGrp_search_condKeydown == "function") {
					group_2.addEventListener("keydown", onGrp_search_condKeydown);
				}
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var grid_1 = new cpr.controls.Grid("grdMain");
				grid_1.init({
					"dataSet": app.lookup("resList"),
					"columnMovable": true,
					"columnResizable": true,
					"noDataMessage": "조회된 데이터가 없습니다.",
					"columns": [
						{"width": "60px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "column1";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "column2";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "column3";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.text = "column4";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.text = "column5";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.text = "column6";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.text = "column7";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.text = "column8";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.text = "column9";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.text = "column10";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "column1";
									cell.style.setClasses(["required"]);
									cell.control = (function(){
										var inputBox_10 = new cpr.controls.InputBox("ipb14");
										inputBox_10.autoSelect = true;
										inputBox_10.userAttr({
											"required": "Y",
											"name": "컬럼1"
										});
										inputBox_10.style.bindClass().toExpression("getStateString() *= \"I\" ? \"required\" : \"\"");
										inputBox_10.bind("enabled").toExpression("getStateString() *= \"I\"");
										inputBox_10.bind("value").toDataColumn("column1");
										return inputBox_10;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "column2";
									cell.control = (function(){
										var inputBox_11 = new cpr.controls.InputBox("ipb13");
										inputBox_11.autoSelect = true;
										inputBox_11.bind("value").toDataColumn("column2");
										return inputBox_11;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "column3";
									cell.control = (function(){
										var inputBox_12 = new cpr.controls.InputBox("ipb12");
										inputBox_12.autoSelect = true;
										inputBox_12.bind("value").toDataColumn("column3");
										return inputBox_12;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "column4";
									cell.control = (function(){
										var inputBox_13 = new cpr.controls.InputBox("ipb11");
										inputBox_13.autoSelect = true;
										inputBox_13.bind("value").toDataColumn("column4");
										return inputBox_13;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 5},
								"configurator": function(cell){
									cell.columnName = "column5";
									cell.control = (function(){
										var inputBox_14 = new cpr.controls.InputBox("ipb10");
										inputBox_14.autoSelect = true;
										inputBox_14.bind("value").toDataColumn("column5");
										return inputBox_14;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 6},
								"configurator": function(cell){
									cell.columnName = "column6";
									cell.control = (function(){
										var inputBox_15 = new cpr.controls.InputBox("ipb15");
										inputBox_15.autoSelect = true;
										inputBox_15.bind("value").toDataColumn("column6");
										return inputBox_15;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 7},
								"configurator": function(cell){
									cell.columnName = "column7";
									cell.control = (function(){
										var inputBox_16 = new cpr.controls.InputBox("ipb16");
										inputBox_16.autoSelect = true;
										inputBox_16.bind("value").toDataColumn("column7");
										return inputBox_16;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 8},
								"configurator": function(cell){
									cell.columnName = "column8";
									cell.control = (function(){
										var inputBox_17 = new cpr.controls.InputBox("ipb17");
										inputBox_17.autoSelect = true;
										inputBox_17.bind("value").toDataColumn("column8");
										return inputBox_17;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 9},
								"configurator": function(cell){
									cell.columnName = "column9";
									cell.control = (function(){
										var inputBox_18 = new cpr.controls.InputBox("ipb18");
										inputBox_18.autoSelect = true;
										inputBox_18.bind("value").toDataColumn("column9");
										return inputBox_18;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 10},
								"configurator": function(cell){
									cell.columnName = "column10";
									cell.control = (function(){
										var inputBox_19 = new cpr.controls.InputBox("ipb19");
										inputBox_19.autoSelect = true;
										inputBox_19.bind("value").toDataColumn("column10");
										return inputBox_19;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnType = "rowindex";
									cell.style.css({
										"text-align" : "center"
									});
								}
							}
						]
					}
				});
				if(typeof onGrdMainBeforeEditrowChange == "function") {
					grid_1.addEventListener("before-editrow-change", onGrdMainBeforeEditrowChange);
				}
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var userDefinedControl_2 = new udc.button_grid();
				if(typeof onButton_gridInsert == "function") {
					userDefinedControl_2.addEventListener("insert", onButton_gridInsert);
				}
				if(typeof onButton_gridDelete == "function") {
					userDefinedControl_2.addEventListener("delete", onButton_gridDelete);
				}
				if(typeof onButton_gridReset == "function") {
					userDefinedControl_2.addEventListener("reset", onButton_gridReset);
				}
				container.addChild(userDefinedControl_2, {
					"colIndex": 0,
					"rowIndex": 2,
					"horizontalAlign": "right",
					"verticalAlign": "fill",
					"width": 70
				});
				var group_3 = new cpr.controls.Container();
				group_3.style.setClasses(["grp-buttons"]);
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.setColumns(["1fr", "90px", "90px"]);
				formLayout_3.setRows(["1fr"]);
				group_3.setLayout(formLayout_3);
				(function(container){
					var button_3 = new cpr.controls.Button();
					button_3.value = "저장";
					button_3.style.setClasses(["cl-button-box"]);
					if(typeof onButtonClick4 == "function") {
						button_3.addEventListener("click", onButtonClick4);
					}
					container.addChild(button_3, {
						"colIndex": 2,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var button_4 = new cpr.controls.Button();
					button_4.value = "Export";
					button_4.style.setClasses(["cl-button-box"]);
					if(typeof onButtonClick3 == "function") {
						button_4.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_4, {
						"colIndex": 1,
						"rowIndex": 0
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 0,
					"rowIndex": 3
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "44px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
		}
	});
	app.title = "onegridlist";
	cpr.core.Platform.INSTANCE.register(app);
})();
