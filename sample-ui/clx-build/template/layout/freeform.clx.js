/*
 * App URI: template/layout/freeform
 * Source Location: template/layout/freeform.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("template/layout/freeform", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			//공통 Util
			var comUtil = createComUtil(app);
			
			/*
			 * Body에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */ e){
				// 최초 신규 입력상태로 시작
				var resMain = app.lookup("resMain");
				resMain.insertRow(0, true);
				
				var grpFrm = app.lookup("grp_frm");
				grpFrm.redraw();
			}
			
			/*
			 * "검색" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				// 화면 조회
				doSearch();
			}
			
			/*
			 * 화면 검색 Function
			 */
			function doSearch() {
				// validation 검색 조건 입력 검증.
				if(comUtil.validate("grp_search_cond") == false) {
					return;
				}
				
				// 조회 Submission send
				comUtil.send("subMain");
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubMainSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subMain = e.control;
				
				// 서버로부터 전달된 메시지가 있을 경우 메시지를 출력
				var message = subMain.getMetadata("msg");
				if(message) {
					comUtil.alert(message);
				}
				
				var resMain = app.lookup("resMain");
				// 조회된 결과가 없을 경우 신규로우를 하나 생성하고 신규상태로
				if(resMain.getRowCount() == 0) {
					resMain.insertRow(0, true);
				}
			
				var grpFrm = app.lookup("grp_frm");
				grpFrm.redraw();
			}
			
			/*
			 * "초기화" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var ipdColumn = app.lookup("ipdColumn1");
				ipdColumn.value = null;
				
				// dataSet 데이터 제거
				var resMain = app.lookup("resMain");
				resMain.clear();
				
				// 데이터가 없을 경우 신규 상태로
				if(resMain.getRowCount() == 0) {
					resMain.insertRow(0, true);
				}
				
				var grp_freeform = app.lookup("grp_freeform");
				grp_freeform.redraw();
			}
			
			/*
			 * "신규" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				//신규 생성
				doNew();
			}
			
			/*
			 * 신규 생성 Function
			 */
			function doNew() {
				// 검색조건 초기화
				var reqKey = app.lookup("reqKey");
				var grpSearchCond= app.lookup("grp_search_cond");
				reqKey.reset();	
				grpSearchCond.redraw();	
				
				// DataSet 초기화
				var resMain = app.lookup("resMain");
				resMain.clear();
				resMain.insertRow(0, true);
				
				// 입력폼 초기화
				var grpFrm = app.lookup("grp_frm");
				grpFrm.redraw();
				
				app.focus("ipdFrmColumn1");
			}
			
			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				// 입력부 저장
				doSave();
			}
			
			/*
			 *  메인 저장 Function
			 */
			function doSave() {
				// Validation 입력부 체크
				if(comUtil.validate("grp_frm") == false) {
					// 검증 실패시 처리 중단
					return;
				}
				
				// 저장 Submission send
				comUtil.send("subSave");
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubSaveSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subSave = e.control;
				
				// 저장 전 상태를 체크하여 적절한 후 처리
				var resMain = app.lookup("resMain");
				var row = resMain.getRow(0);
				var rowState = row.getStateString(true);
				if(rowState == "D") { // 삭제
					comUtil.alert("삭제 되었습니다.");
					// 재조회
					doSearch();
				} else if(rowState == "U") { // 수정
					comUtil.alert("수정 되었습니다.");
					// 재조회
					doSearch();
				} else if(rowState == "I") { // 신규
					comUtil.alert("등록 되었습니다.");
					// 신규 입력된 값이 조회되도록 검색조건을 맞추고 재조회
					app.lookup("ipdColumn1").value = app.lookup("ipdFrmColumn1").value;
					doSearch();
				}
				
				// 서버로부터 전달된 메시지가 있을 경우 메시지를 출력
				var msg = subSave.getMetadata("msg");
				if(msg) {
					comUtil.alert(msg);
				}
			}
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				// 삭제 여부 체크
				var isOk = confirm("삭제하시겠습니까?");
				if(isOk == false) {
					return;
				}
				
				// 데이터셋의 상태를 체크
				var resMain = app.lookup("resMain");
				var row = resMain.getRow(0);
				var rowState = row.getStateString(true);
				
				if(rowState == "I") {
					// 신규 상태에서는 다시 신규 상태로 / 별도 서버 호출 없음.
					doNew();
				} else {
					//row 삭제
					resMain.deleteRow(0);
					// 저장
					doSave();
				}
			}
			
			/*
			 * 그룹에서 keydown 이벤트 발생 시 호출.
			 * 사용자가 키를 누를 때 발생하는 이벤트.
			 */
			function onGrp_search_condKeydown(/* cpr.events.CKeyboardEvent */ e){
				/** 
				 * @type cpr.controls.Container
				 */
				var grp_search_cond = e.control;
				// 검색부에서 enter key가 입력되면 자동 조회
				if(e.keyCode == cpr.events.KeyCode.ENTER) {
					// 화면 조회
					doSearch();
				}	
			}
			
			/*
			 * 사용자 정의 컨트롤에서 search 이벤트 발생 시 호출.
			 */
			function onSearch_type1Search(/* cpr.events.CUIEvent */ e){
				/** 
				 * @type udc.search.search_type1
				 */
				// 인풋박스 초기화
				var ipdColumn1 = e.control;
				var initValue = ipdColumn1.value;
			//	ipdColumn1.value = "";
				// 팝업창 추가
				var _app = app;
				cpr.core.App.load("template/layout/popup/popup01", function(app) {
					var dialog = new cpr.controls.Dialog(app);
					//다이얼로그 설정
					dialog.headerTitle = "popup01";
					dialog.headerVisible = true;
					dialog.headerClose = true; 
					//다이얼로그 위치 지정
					dialog.style.css({
						top : "calc(50% - 300px)",
						left : "calc(50% - 400px)",
						width : "800px",
						height : "600px",
						backgroundColor : "white"
					});
					
					if(initValue){
						dialog.initValue = initValue;
					}
			
					// 다이얼로그 close 시 발생하는 이벤트 handler
					dialog.addEventListener("close", function(e) {
						// 종료 시 반환되는 returnValue를 설정
						var returnValue = dialog.returnValue;
						if (returnValue == null) {
							return;
						}
						ipdColumn1.value = returnValue.column1;
					});
			
					// app에 다이얼로그 추가
					_app.getContainer().addChild(dialog);
				});
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			var dataSet_1 = new cpr.data.DataSet("resMain");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("reqKey");
			dataMap_1.parseData({
				"alterColumnLayout": "client",
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{"name": "column6"},
					{"name": "column7"},
					{"name": "column8"},
					{"name": "column9"},
					{"name": "column10"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("subMain");
			submission_1.action = "../template/freeform/getMainList.do";
			submission_1.addRequestData(dataMap_1);
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubMainSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubMainSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subSave");
			submission_2.action = "../template/freeform/save.do";
			submission_2.addRequestData(dataSet_1);
			if(typeof onSubSaveSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSubSaveSubmitSuccess);
			}
			app.register(submission_2);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.pagetitle();
			userDefinedControl_1.bind("title").toAppProperty("title");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "24px"
			});
			
			var group_1 = new cpr.controls.Container("grp_freeform");
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["40px", "1fr", "40px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container("grp_search_cond");
				group_2.style.setClasses(["grp-search"]);
				var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("reqKey"));
				group_2.setBindContext(dataMapContext_1);
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.setColumns(["100px", "150px", "5fr", "90px"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "column1";
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var userDefinedControl_2 = new udc.search.search_type1("ipdColumn1");
					userDefinedControl_2.required = "required";
					userDefinedControl_2.userAttr({
						"required": "Y",
						"name": "컬럼1"
					});
					userDefinedControl_2.bind("value").toDataColumn("column1");
					if(typeof onSearch_type1Search == "function") {
						userDefinedControl_2.addEventListener("search", onSearch_type1Search);
					}
					container.addChild(userDefinedControl_2, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "검색";
					if(typeof onButtonClick2 == "function") {
						button_1.addEventListener("click", onButtonClick2);
					}
					container.addChild(button_1, {
						"colIndex": 3,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
				})(group_2);
				if(typeof onGrp_search_condKeydown == "function") {
					group_2.addEventListener("keydown", onGrp_search_condKeydown);
				}
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_3 = new cpr.controls.Container("grp_frm");
				group_3.style.setClasses(["grp-freeform"]);
				var dataRowContext_1 = new cpr.bind.DataRowContext(app.lookup("resMain"), 0);
				group_3.setBindContext(dataRowContext_1);
				// Layout
				var formLayout_3 = new cpr.controls.layouts.FormLayout();
				formLayout_3.horizontalSeparatorClass = "frm-hseparator";
				formLayout_3.horizontalSeparatorWidth = 1;
				formLayout_3.verticalSeparatorClass = "frm-vseparator";
				formLayout_3.verticalSeparatorWidth = 1;
				formLayout_3.setColumns(["100px", "1fr", "100px", "1fr"]);
				formLayout_3.setRows(["25px", "25px", "25px", "25px", "25px", "1fr"]);
				group_3.setLayout(formLayout_3);
				(function(container){
					var output_2 = new cpr.controls.Output();
					output_2.value = "column1";
					output_2.style.setClasses(["ctl-header"]);
					container.addChild(output_2, {
						"colIndex": 0,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
					var inputBox_1 = new cpr.controls.InputBox("ipdFrmColumn1");
					inputBox_1.autoSelect = true;
					inputBox_1.userAttr({
						"required": "Y",
						"name": "컬럼1"
					});
					inputBox_1.style.setClasses(["required"]);
					inputBox_1.bind("value").toDataColumn("column1");
					inputBox_1.bind("enabled").toExpression("getStateString() *= \"I\"");
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "column2";
					output_3.style.setClasses(["ctl-header"]);
					container.addChild(output_3, {
						"colIndex": 2,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
					var inputBox_2 = new cpr.controls.InputBox("ipdFrmColumn2");
					inputBox_2.autoSelect = true;
					inputBox_2.bind("value").toDataColumn("column2");
					container.addChild(inputBox_2, {
						"colIndex": 3,
						"rowIndex": 0,
						"verticalAlign": "fill"
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "column3";
					output_4.style.setClasses(["ctl-header"]);
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 1,
						"verticalAlign": "fill"
					});
					var inputBox_3 = new cpr.controls.InputBox("ipdFrmColumn3");
					inputBox_3.autoSelect = true;
					inputBox_3.bind("value").toDataColumn("column3");
					container.addChild(inputBox_3, {
						"colIndex": 1,
						"rowIndex": 1,
						"verticalAlign": "fill"
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "column4";
					output_5.style.setClasses(["ctl-header"]);
					container.addChild(output_5, {
						"colIndex": 2,
						"rowIndex": 1,
						"verticalAlign": "fill"
					});
					var inputBox_4 = new cpr.controls.InputBox("ipdFrmColumn4");
					inputBox_4.autoSelect = true;
					inputBox_4.bind("value").toDataColumn("column4");
					container.addChild(inputBox_4, {
						"colIndex": 3,
						"rowIndex": 1,
						"verticalAlign": "fill"
					});
					var output_6 = new cpr.controls.Output();
					output_6.value = "column5";
					output_6.style.setClasses(["ctl-header"]);
					container.addChild(output_6, {
						"colIndex": 0,
						"rowIndex": 2,
						"verticalAlign": "fill"
					});
					var inputBox_5 = new cpr.controls.InputBox("ipdFrmColumn5");
					inputBox_5.autoSelect = true;
					inputBox_5.bind("value").toDataColumn("column5");
					container.addChild(inputBox_5, {
						"colIndex": 1,
						"rowIndex": 2,
						"verticalAlign": "fill"
					});
					var output_7 = new cpr.controls.Output();
					output_7.value = "column6";
					output_7.style.setClasses(["ctl-header"]);
					container.addChild(output_7, {
						"colIndex": 2,
						"rowIndex": 2,
						"verticalAlign": "fill"
					});
					var inputBox_6 = new cpr.controls.InputBox("ipdFrmColumn6");
					inputBox_6.autoSelect = true;
					inputBox_6.bind("value").toDataColumn("column6");
					container.addChild(inputBox_6, {
						"colIndex": 3,
						"rowIndex": 2,
						"verticalAlign": "fill"
					});
					var output_8 = new cpr.controls.Output();
					output_8.value = "column7";
					output_8.style.setClasses(["ctl-header"]);
					container.addChild(output_8, {
						"colIndex": 0,
						"rowIndex": 3,
						"verticalAlign": "fill"
					});
					var inputBox_7 = new cpr.controls.InputBox("ipdFrmColumn7");
					inputBox_7.autoSelect = true;
					inputBox_7.bind("value").toDataColumn("column7");
					container.addChild(inputBox_7, {
						"colIndex": 1,
						"rowIndex": 3,
						"verticalAlign": "fill"
					});
					var output_9 = new cpr.controls.Output();
					output_9.value = "column8";
					output_9.style.setClasses(["ctl-header"]);
					container.addChild(output_9, {
						"colIndex": 2,
						"rowIndex": 3,
						"verticalAlign": "fill"
					});
					var inputBox_8 = new cpr.controls.InputBox("ipdFrmColumn8");
					inputBox_8.autoSelect = true;
					inputBox_8.bind("value").toDataColumn("column8");
					container.addChild(inputBox_8, {
						"colIndex": 3,
						"rowIndex": 3,
						"verticalAlign": "fill"
					});
					var output_10 = new cpr.controls.Output();
					output_10.value = "column9";
					output_10.style.setClasses(["ctl-header"]);
					container.addChild(output_10, {
						"colIndex": 0,
						"rowIndex": 4,
						"verticalAlign": "fill"
					});
					var inputBox_9 = new cpr.controls.InputBox("ipdFrmColumn9");
					inputBox_9.autoSelect = true;
					inputBox_9.bind("value").toDataColumn("column9");
					container.addChild(inputBox_9, {
						"colIndex": 1,
						"rowIndex": 4,
						"verticalAlign": "fill"
					});
					var output_11 = new cpr.controls.Output();
					output_11.value = "column10";
					output_11.style.setClasses(["ctl-header"]);
					container.addChild(output_11, {
						"colIndex": 2,
						"rowIndex": 4,
						"verticalAlign": "fill"
					});
					var inputBox_10 = new cpr.controls.InputBox("ipdFrmColumn10");
					inputBox_10.autoSelect = true;
					inputBox_10.bind("value").toDataColumn("column10");
					container.addChild(inputBox_10, {
						"colIndex": 3,
						"rowIndex": 4,
						"verticalAlign": "fill"
					});
					var group_4 = new cpr.controls.Container();
					// Layout
					var xYLayout_2 = new cpr.controls.layouts.XYLayout();
					group_4.setLayout(xYLayout_2);
					(function(container){
					})(group_4);
					container.addChild(group_4, {
						"colIndex": 0,
						"rowIndex": 5,
						"colSpan": 4,
						"rowSpan": 1,
						"verticalAlign": "fill"
					});
				})(group_3);
				container.addChild(group_3, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var group_5 = new cpr.controls.Container();
				group_5.style.setClasses(["grp-buttons"]);
				// Layout
				var formLayout_4 = new cpr.controls.layouts.FormLayout();
				formLayout_4.setColumns(["1fr", "90px", "90px", "90px", "90px"]);
				formLayout_4.setRows(["1fr"]);
				group_5.setLayout(formLayout_4);
				(function(container){
					var button_2 = new cpr.controls.Button();
					button_2.value = "저장";
					button_2.style.setClasses(["cl-button-box"]);
					if(typeof onButtonClick3 == "function") {
						button_2.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_2, {
						"colIndex": 3,
						"rowIndex": 0,
						"horizontalAlign": "fill",
						"verticalAlign": "fill"
					});
					var button_3 = new cpr.controls.Button();
					button_3.value = "초기화";
					if(typeof onButtonClick == "function") {
						button_3.addEventListener("click", onButtonClick);
					}
					container.addChild(button_3, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_4 = new cpr.controls.Button();
					button_4.value = "신규";
					if(typeof onButtonClick4 == "function") {
						button_4.addEventListener("click", onButtonClick4);
					}
					container.addChild(button_4, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var button_5 = new cpr.controls.Button();
					button_5.value = "삭제";
					if(typeof onButtonClick5 == "function") {
						button_5.addEventListener("click", onButtonClick5);
					}
					container.addChild(button_5, {
						"colIndex": 4,
						"rowIndex": 0
					});
				})(group_5);
				container.addChild(group_5, {
					"colIndex": 0,
					"rowIndex": 2
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "44px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "freeform";
	cpr.core.Platform.INSTANCE.register(app);
})();
