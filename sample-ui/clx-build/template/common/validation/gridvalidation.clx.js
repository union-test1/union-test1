/*
 * App URI: template/common/validation/gridvalidation
 * Source Location: template/common/validation/gridvalidation.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("template/common/validation/gridvalidation", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			//공통 Util
			var comUtil = createComUtil(app);
			
			/*
			 * "신규" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd1 = app.lookup("grd1");
				// 그리드의 신규 row를 추가.
				var insertedRow = grd1.insertRow(grd1.getSelectedRowIndex(), true);
				if(insertedRow) {
					var rowIndex = insertedRow.getIndex();
					grd1.selectRows([rowIndex]);			// 추가한 row를 선택
					grd1.setEditRowIndex(rowIndex);			// editing 모드로 설정.
					grd1.focusCell(rowIndex, 0);			// 입력할 수 있도록 첫번째 cell에 포커스
				}
			}
			
			/*
			 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd1 = app.lookup("grd1");
				// 그리드의 선택된 row 삭제
				grd1.deleteRow(grd1.getSelectedRowIndex());
			}
			
			/*
			 * "검증" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				// 그리드를 전체 데이터를 기준으로 validation을 실행
				var valid = comUtil.validateGrid("grd1", "all");
				if(valid == true) {
					comUtil.alert("검증을 통과하였습니다.");
				}
			}
			
			/*
			 * "변경된행검증" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick4(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				// 그리드를 변경된 데이터를 기준으로 validation을 실행
				var valid = comUtil.validateGrid("grd1", "upd");
				if(valid == true) {
					comUtil.alert("검증을 통과하였습니다.");
				}
			}
			
			/*
			 * "편집행검증" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick5(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				// 그리드를 현재 편집중인 데이터를 기준으로 validation을 실행
				var valid = comUtil.validateGrid("grd1");
				if(valid == true) {
					comUtil.alert("검증을 통과하였습니다.");
				}
			}
			
			
			
			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb5ValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.InputBox
				 */
				var ipb5 = e.control;
			
				// 컨트롤의 입력 값을 보정합니다.
				comUtil.revise(ipb5);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			var dataSet_1 = new cpr.data.DataSet("dataList");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				],
				"rows": [
					{"column1": "column11", "column2": "honggildong@yahoo.com", "column3": "column31111", "column4": "column4111", "column5": "column51"},
					{"column1": "column12", "column2": "honggildong@yahoo.com", "column3": "column32222", "column4": "column4222", "column5": "column5222"},
					{"column1": "column13", "column2": "honggildong@yahoo.com", "column3": "column33333", "column4": "column4333", "column5": "column5333"},
					{"column1": "column14", "column2": "honggildong@yahoo.com", "column3": "column34444", "column4": "column4444", "column5": "column5444"},
					{"column1": "column15", "column2": "honggildong@yahoo.com", "column3": "column35555", "column4": "column4555", "column5": "column5555"},
					{"column1": "column16", "column2": "honggildong@yahoo.com", "column3": "column36666", "column4": "column4666", "column5": "column5666"},
					{"column1": "column17", "column2": "honggildong@yahoo.com", "column3": "column37777", "column4": "column4777", "column5": "column5777"},
					{"column1": "column18", "column2": "honggildong@yahoo.com", "column3": "column38888", "column4": "column4888", "column5": "column5888"},
					{"column1": "column19", "column2": "honggildong@yahoo.com", "column3": "column39999", "column4": "column4999", "column5": "column5999"},
					{"column1": "column110", "column2": "honggildong@yahoo.com", "column3": "column310000", "column4": "column4100", "column5": "column5100"},
					{"column1": "column111", "column2": "honggildong@yahoo.com", "column3": "column311111", "column4": "column4111", "column5": "column5111"},
					{"column1": "column112", "column2": "honggildong@yahoo.com", "column3": "column312222", "column4": "column4122", "column5": "column5122"},
					{"column1": "column113", "column2": "honggildong@yahoo.com", "column3": "column313333", "column4": "column4133", "column5": "column5133"},
					{"column1": "column114", "column2": "honggildong@yahoo.com", "column3": "column314444", "column4": "column4144", "column5": "column5144"},
					{"column1": "column115", "column2": "honggildong@yahoo.com", "column3": "column315555", "column4": "column4155", "column5": "column5155"},
					{"column1": "column116", "column2": "honggildong@yahoo.com", "column3": "column316666", "column4": "column4166", "column5": "column5166"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr"]);
			formLayout_1.setRows(["25px", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var group_2 = new cpr.controls.Container();
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.setColumns(["1fr", "100px", "100px", "100px", "100px", "100px"]);
				formLayout_2.setRows(["1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var button_1 = new cpr.controls.Button();
					button_1.value = "신규";
					if(typeof onButtonClick == "function") {
						button_1.addEventListener("click", onButtonClick);
					}
					container.addChild(button_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "삭제";
					if(typeof onButtonClick2 == "function") {
						button_2.addEventListener("click", onButtonClick2);
					}
					container.addChild(button_2, {
						"colIndex": 2,
						"rowIndex": 0
					});
					var button_3 = new cpr.controls.Button();
					button_3.value = "전체검증";
					if(typeof onButtonClick3 == "function") {
						button_3.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_3, {
						"colIndex": 3,
						"rowIndex": 0
					});
					var button_4 = new cpr.controls.Button();
					button_4.value = "변경된행검증";
					if(typeof onButtonClick4 == "function") {
						button_4.addEventListener("click", onButtonClick4);
					}
					container.addChild(button_4, {
						"colIndex": 4,
						"rowIndex": 0
					});
					var button_5 = new cpr.controls.Button();
					button_5.value = "편집행검증";
					if(typeof onButtonClick5 == "function") {
						button_5.addEventListener("click", onButtonClick5);
					}
					container.addChild(button_5, {
						"colIndex": 5,
						"rowIndex": 0
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var grid_1 = new cpr.controls.Grid("grd1");
				grid_1.init({
					"dataSet": app.lookup("dataList"),
					"bufferedScroll": true,
					"columns": [
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"},
						{"width": "100px"}
					],
					"header": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.text = "Required";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.text = "Email";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.text = "MinLength10";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.text = "FixLength10";
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.text = "Lpad";
								}
							}
						]
					},
					"detail": {
						"rows": [{"height": "24px"}],
						"cells": [
							{
								"constraint": {"rowIndex": 0, "colIndex": 0},
								"configurator": function(cell){
									cell.columnName = "column1";
									cell.control = (function(){
										var inputBox_1 = new cpr.controls.InputBox("ipb1");
										inputBox_1.autoSelect = true;
										inputBox_1.userAttr({
											"required": "Y",
											"name": "컬럼1"
										});
										inputBox_1.style.setClasses(["required"]);
										inputBox_1.bind("value").toDataColumn("column1");
										return inputBox_1;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 1},
								"configurator": function(cell){
									cell.columnName = "column2";
									cell.control = (function(){
										var inputBox_2 = new cpr.controls.InputBox("ipb2");
										inputBox_2.autoSelect = true;
										inputBox_2.userAttr({
											"type": "email",
											"name": "컬럼2"
										});
										inputBox_2.bind("value").toDataColumn("column2");
										return inputBox_2;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 2},
								"configurator": function(cell){
									cell.columnName = "column3";
									cell.control = (function(){
										var inputBox_3 = new cpr.controls.InputBox("ipb3");
										inputBox_3.lengthUnit = "utf8";
										inputBox_3.maxLength = 15;
										inputBox_3.autoSelect = true;
										inputBox_3.userAttr({
											"minlength": "10",
											"name": "컬럼3"
										});
										inputBox_3.bind("value").toDataColumn("column3");
										return inputBox_3;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 3},
								"configurator": function(cell){
									cell.columnName = "column4";
									cell.control = (function(){
										var inputBox_4 = new cpr.controls.InputBox("ipb4");
										inputBox_4.autoSelect = true;
										inputBox_4.userAttr({
											"fixlength": "10",
											"name": "컬럼4"
										});
										inputBox_4.bind("value").toDataColumn("column4");
										return inputBox_4;
									})();
								}
							},
							{
								"constraint": {"rowIndex": 0, "colIndex": 4},
								"configurator": function(cell){
									cell.columnName = "column5";
									cell.control = (function(){
										var inputBox_5 = new cpr.controls.InputBox("ipb5");
										inputBox_5.autoSelect = true;
										inputBox_5.userAttr({
											"name": "컬럼5",
											"fixlength": "10",
											"minlength": "5",
											"lpad": "#"
										});
										if(typeof onIpb5ValueChange == "function") {
											inputBox_5.addEventListener("value-change", onIpb5ValueChange);
										}
										inputBox_5.bind("value").toDataColumn("column5");
										return inputBox_5;
									})();
								}
							}
						]
					}
				});
				container.addChild(grid_1, {
					"colIndex": 0,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "44px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
			
			var userDefinedControl_1 = new udc.pagetitle();
			userDefinedControl_1.bind("title").toAppProperty("title");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "24px"
			});
		}
	});
	app.title = "gridvalidation";
	cpr.core.Platform.INSTANCE.register(app);
})();
