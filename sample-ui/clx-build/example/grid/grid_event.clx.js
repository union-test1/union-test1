/*
 * App URI: example/grid/grid_event
 * Source Location: example/grid/grid_event.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/grid/grid_event", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			function eventLog(text) {
				
				var txa1 = app.lookup("txa1");
				var date = new Date();
				var hours = date.getHours();
				hours = (hours < 10) ? "0"+hours : ""+hours;
				var minutes = date.getMinutes();
				minutes = (minutes < 10) ? "0"+minutes : ""+minutes;
				var seconds = date.getSeconds();
				seconds = (seconds < 10) ? "0"+seconds : ""+seconds;
				var time = hours + ":" + minutes + ":" + seconds;
			
				var value = time + " : " + text;
				if (txa1.value != null && txa1.value != "") {
					value += "\n" +txa1.value;
				}
				txa1.value = value;
				
			}
			
			/*
			 * "insert" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd = app.lookup("grd1");
				var selectRow = grd.getSelectedRow();
				
				if (selectRow != null) {
					grd.insertRow(selectRow.getIndex(), true);
				} else {
					grd.insertRow(0, false);
				}
				
			}
			
			/*
			 * "delete" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var grd = app.lookup("grd1");
				var selectRow = grd.getSelectedRow();
				
				if (selectRow != null) {
					grd.deleteRow(selectRow.getIndex());
				} else {
					alert("선택된 행이 없습니다.");
				}
				
			}
			
			/*
			 * "clear" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(/* cpr.events.CMouseEvent */ e){
			
				var txa1 = app.lookup("txa1");
				txa1.value = "";
			}
			
			/*
			 * 그리드에서 before-insert 이벤트 발생 시 호출.
			 * Grid의 행이 추가되기 전에 발생하는 이벤트.
			 */
			function onGrd1BeforeInsert(/* cpr.events.CGridEvent */ e){
				
				eventLog("grid before-insert");
			}
			
			/*
			 * 그리드에서 insert 이벤트 발생 시 호출.
			 * Grid의 행이 추가되었을 때 이벤트.
			 */
			function onGrd1Insert(/* cpr.events.CGridEvent */ e){
				
				eventLog("grid insert");
				
			}
			
			/*
			 * 그리드에서 before-update 이벤트 발생 시 호출.
			 * Grid의 행 데이터가 수정되기 전에 발생하는 이벤트.
			 */
			function onGrd1BeforeUpdate(/* cpr.events.CGridEvent */ e){
				
				eventLog("grid before-update");
			}
			
			/*
			 * 그리드에서 update 이벤트 발생 시 호출.
			 * Grid의 행 데이터가 수정되었을 때 이벤트.
			 */
			function onGrd1Update(/* cpr.events.CGridEvent */ e){
			
				eventLog("grid update");
				
			}
			
			/*
			 * 그리드에서 before-delete 이벤트 발생 시 호출.
			 * Grid의 행이 삭제되기 전에 발생하는 이벤트.
			 */
			function onGrd1BeforeDelete(/* cpr.events.CGridEvent */ e){
			
				eventLog("grid before-delete");
			}
			
			/*
			 * 그리드에서 delete 이벤트 발생 시 호출.
			 * Grid의 행이 삭제되었을 때 이벤트.
			 */
			function onGrd1Delete(/* cpr.events.CGridEvent */ e){
				
				eventLog("grid delete");
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			app.declareBindableAppProperty("explain", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"}
				],
				"rows": [
					{"column1": "column11", "column2": "column21", "column3": "column31", "column4": "column41", "column5": "column51"},
					{"column1": "column12", "column2": "column22", "column3": "column32", "column4": "column42", "column5": "column52"},
					{"column1": "column13", "column2": "column23", "column3": "column33", "column4": "column43", "column5": "column53"},
					{"column1": "column14", "column2": "column24", "column3": "column34", "column4": "column44", "column5": "column54"},
					{"column1": "column15", "column2": "column25", "column3": "column35", "column4": "column45", "column5": "column55"},
					{"column1": "column16", "column2": "column26", "column3": "column36", "column4": "column46", "column5": "column56"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "main");
			app.supportMedia("all and (min-width: 500px) and (max-width: 799px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.text = "column5";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
								cell.control = (function(){
									var inputBox_1 = new cpr.controls.InputBox("ipb1");
									inputBox_1.bind("value").toDataColumn("column1");
									return inputBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
								cell.control = (function(){
									var inputBox_2 = new cpr.controls.InputBox("ipb2");
									inputBox_2.bind("value").toDataColumn("column2");
									return inputBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
								cell.control = (function(){
									var inputBox_3 = new cpr.controls.InputBox("ipb3");
									inputBox_3.bind("value").toDataColumn("column3");
									return inputBox_3;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
								cell.control = (function(){
									var inputBox_4 = new cpr.controls.InputBox("ipb4");
									inputBox_4.bind("value").toDataColumn("column4");
									return inputBox_4;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
								cell.control = (function(){
									var inputBox_5 = new cpr.controls.InputBox("ipb5");
									inputBox_5.bind("value").toDataColumn("column5");
									return inputBox_5;
								})();
							}
						}
					]
				}
			});
			if(typeof onGrd1BeforeInsert == "function") {
				grid_1.addEventListener("before-insert", onGrd1BeforeInsert);
			}
			if(typeof onGrd1Insert == "function") {
				grid_1.addEventListener("insert", onGrd1Insert);
			}
			if(typeof onGrd1BeforeUpdate == "function") {
				grid_1.addEventListener("before-update", onGrd1BeforeUpdate);
			}
			if(typeof onGrd1Update == "function") {
				grid_1.addEventListener("update", onGrd1Update);
			}
			if(typeof onGrd1BeforeDelete == "function") {
				grid_1.addEventListener("before-delete", onGrd1BeforeDelete);
			}
			if(typeof onGrd1Delete == "function") {
				grid_1.addEventListener("delete", onGrd1Delete);
			}
			container.addChild(grid_1, {
				"top": "115px",
				"left": "10px",
				"width": "400px",
				"height": "455px"
			});
			
			var userDefinedControl_1 = new udc.pagetitle2();
			userDefinedControl_1.bind("title").toAppProperty("title");
			userDefinedControl_1.bind("explain").toAppProperty("explain");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "50px"
			});
			
			var textArea_1 = new cpr.controls.TextArea("txa1");
			container.addChild(textArea_1, {
				"top": "115px",
				"right": "20px",
				"left": "420px",
				"height": "455px"
			});
			
			var output_1 = new cpr.controls.Output();
			output_1.value = "이벤트 로그";
			output_1.style.css({
				"color" : "#333333"
			});
			container.addChild(output_1, {
				"top": "90px",
				"left": "420px",
				"width": "100px",
				"height": "25px"
			});
			
			var button_1 = new cpr.controls.Button();
			button_1.value = "insert";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				"top": "80px",
				"left": "10px",
				"width": "100px",
				"height": "25px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "delete";
			if(typeof onButtonClick2 == "function") {
				button_2.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_2, {
				"top": "80px",
				"left": "120px",
				"width": "100px",
				"height": "25px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "clear";
			if(typeof onButtonClick6 == "function") {
				button_3.addEventListener("click", onButtonClick6);
			}
			container.addChild(button_3, {
				"top": "80px",
				"right": "21px",
				"width": "100px",
				"height": "25px"
			});
		}
	});
	app.title = "grid_event";
	cpr.core.Platform.INSTANCE.register(app);
})();
