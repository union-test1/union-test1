/*
 * App URI: example/thricecombo/thricecomboingrid
 * Source Location: example/thricecombo/thricecomboingrid.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/thricecombo/thricecomboingrid", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/*
			 * Body에서 init 이벤트 발생 시 호출. 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(/* cpr.events.CEvent */e) {
				// 콤보박스의 데이터셋 Submission send
				app.lookup("subDeptList").send();
			}
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출. 통신이 성공하면 발생합니다.
			 */
			function onSms1SubmitSuccess(/* cpr.events.CSubmissionEvent */e) {
				/**
				 * @type cpr.protocols.Submission
				 */
				var subDeptList = e.control;
			
				var grd_dept = app.lookup("grd_dept");
			
				var cmb_ldept = app.lookup("cmb_ldept");
				var cmb_mdept = app.lookup("cmb_mdept");
				var cmb_sdept = app.lookup("cmb_sdept");
			
				// 모든 콤보박스의 filter를 제거
				cmb_ldept.clearFilter();
				cmb_mdept.clearFilter();
				cmb_sdept.clearFilter();
			
				grd_dept.redraw();
			
			}
			
			/*
			 * 그리드에서 before-editrow-change 이벤트 발생 시 호출. Grid의 edit row가 변경되기 전에 발생하는 이벤트 입니다.
			 */
			function onGrd1BeforeEditrowChange(/* cpr.events.CGridEvent */e) {
				/**
				 * @type cpr.controls.Grid
				 */
				var grd_dept = e.control;
				/**
				 * @type cpr.controls.provider.GridRow
				 */
				var newRow = e.newSelection; // editing mode의 row
				var cmb_ldept = app.lookup("cmb_ldept");
				var cmb_mdept = app.lookup("cmb_mdept");
				var cmb_sdept = app.lookup("cmb_sdept");
				if (newRow) {
					// 콤보박스에 filter(regex)를 설정
					cmb_ldept.setFilter("parent == '00000'");
					cmb_mdept.setFilter("parent == '" + newRow.getValue("ldept") + "'");
					cmb_sdept.setFilter("parent == '" + newRow.getValue("mdept") + "'");
				}
				grd_dept.redraw();
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출. ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb_ldeptSelectionChange(/* cpr.events.CSelectionEvent */e) {
				/**
				 * @type cpr.controls.ComboBox
				 */
				var cmb_ldept = e.control;
				var cmb_mdept = app.lookup("cmb_mdept");
				// 콤보박스에 filter(regex)를 설정
				cmb_mdept.setFilter("parent == '" + cmb_ldept.value + "'");
			
				cmb_mdept.redraw();
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출. ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCmb_mdeptSelectionChange(/* cpr.events.CSelectionEvent */e) {
				/**
				 * @type cpr.controls.ComboBox
				 */
				var cmb_mdept = e.control;
				var cmb_sdept = app.lookup("cmb_sdept");
				// 콤보박스에 filter(regex)를 설정
				cmb_sdept.setFilter("parent == '" + cmb_mdept.value + "'");
				cmb_sdept.redraw();
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			app.declareBindableAppProperty("explain", null);
			var dataSet_1 = new cpr.data.DataSet("ldept");
			dataSet_1.parseData({
				"filterCondition": "",
				"columns": [
					{"name": "code"},
					{
						"name": "name",
						"dataType": "string"
					},
					{"name": "parent"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("mdept");
			dataSet_2.parseData({
				"filterCondition": "",
				"columns": [
					{"name": "code"},
					{
						"name": "name",
						"dataType": "string"
					},
					{"name": "parent"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("sdept");
			dataSet_3.parseData({
				"filterCondition": "",
				"columns": [
					{"name": "code"},
					{
						"name": "name",
						"dataType": "string"
					},
					{"name": "parent"}
				]
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("resList");
			dataSet_4.parseData({
				"columns": [
					{"name": "ldept"},
					{"name": "mdept"},
					{"name": "sdept"}
				],
				"rows": [
					{"ldept": "11000", "mdept": "", "sdept": ""},
					{"ldept": "12000", "mdept": "12020", "sdept": ""},
					{"ldept": "", "mdept": "", "sdept": ""},
					{"ldept": "14000", "mdept": "", "sdept": ""},
					{"ldept": "15000", "mdept": "15500", "sdept": "15520"}
				]
			});
			app.register(dataSet_4);
			var submission_1 = new cpr.protocols.Submission("subDeptList");
			submission_1.action = "../example/grdDept/getDeptList.do";
			submission_1.mediaType = "application/x-www-form-urlencoded";
			submission_1.responseType = "text";
			submission_1.addResponseData(dataSet_1, false);
			submission_1.addResponseData(dataSet_2, false);
			submission_1.addResponseData(dataSet_3, false);
			if(typeof onSms1SubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSms1SubmitSuccess);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "main");
			app.supportMedia("all and (max-width: 1023px)", "default");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd_dept");
			grid_1.init({
				"dataSet": app.lookup("resList"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.text = "ldept";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.text = "mdept";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.text = "sdept";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "ldept";
								cell.control = (function(){
									var comboBox_1 = new cpr.controls.ComboBox("cmb_ldept");
									comboBox_1.placeholder = "선택하세요";
									(function(comboBox_1){
										comboBox_1.setItemSet(app.lookup("ldept"), {
											"label": "name",
											"value": "code"
										})
									})(comboBox_1);
									if(typeof onCmb_ldeptSelectionChange == "function") {
										comboBox_1.addEventListener("selection-change", onCmb_ldeptSelectionChange);
									}
									comboBox_1.bind("value").toDataColumn("ldept");
									return comboBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "mdept";
								cell.control = (function(){
									var comboBox_2 = new cpr.controls.ComboBox("cmb_mdept");
									comboBox_2.placeholder = "선택하세요";
									(function(comboBox_2){
										comboBox_2.setItemSet(app.lookup("mdept"), {
											"label": "name",
											"value": "code"
										})
									})(comboBox_2);
									if(typeof onCmb_mdeptSelectionChange == "function") {
										comboBox_2.addEventListener("selection-change", onCmb_mdeptSelectionChange);
									}
									comboBox_2.bind("value").toDataColumn("mdept");
									return comboBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "sdept";
								cell.control = (function(){
									var comboBox_3 = new cpr.controls.ComboBox("cmb_sdept");
									comboBox_3.placeholder = "선택하세요";
									(function(comboBox_3){
										comboBox_3.setItemSet(app.lookup("sdept"), {
											"label": "name",
											"value": "code"
										})
									})(comboBox_3);
									comboBox_3.bind("value").toDataColumn("sdept");
									return comboBox_3;
								})();
							}
						}
					]
				}
			});
			if(typeof onGrd1BeforeEditrowChange == "function") {
				grid_1.addEventListener("before-editrow-change", onGrd1BeforeEditrowChange);
			}
			container.addChild(grid_1, {
				"top": "70px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
			
			var userDefinedControl_1 = new udc.pagetitle2();
			userDefinedControl_1.bind("title").toAppProperty("title");
			userDefinedControl_1.bind("explain").toAppProperty("explain");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "50px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "thricecomboingrid";
	cpr.core.Platform.INSTANCE.register(app);
})();
