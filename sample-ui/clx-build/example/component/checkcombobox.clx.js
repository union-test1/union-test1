/*
 * App URI: example/component/checkcombobox
 * Source Location: example/component/checkcombobox.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/component/checkcombobox", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * 체크 박스에서 value-change 이벤트 발생 시 호출.
			 * CheckBox의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCbx_multipleValueChange(/* cpr.events.CValueChangeEvent */ e){
				/** 
				 * @type cpr.controls.CheckBox
				 */
				var cbx_multiple = e.control;
				var combo = app.lookup("checkCombo");
				combo.multiple = cbx_multiple.value == "true";
				
				print("multiple", combo.multiple);
			}
			
			/*
			 * "label 표기 방식 설정" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var combo = app.lookup("checkCombo");
				var input = app.lookup("ipb_displayExp");
				var inputValue = input.value;
				if(inputValue != ""){
					combo.displayExp = inputValue;
				}
				
				print("displayExp", combo.displayExp);
			}
			
			/*
			 * "다중 선택 시 구분자 설정" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var combo = app.lookup("checkCombo");
				var input = app.lookup("ipb_delimiter");
				var inputValue = input.value;
				if(inputValue != ""){
					combo.delimiter = inputValue;
				}
				
				print("delimiter", combo.delimiter);
			}
			
			/*
			 * "콤보 박스의 값 변경" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				var combo = app.lookup("checkCombo");
				var input = app.lookup("ipb_value");
				var inputValue = input.value;
				if(inputValue != ""){
					combo.value = inputValue;
				}
				
				print("value", combo.value);
			}
			
			
			function print(name, value){
				var textarea = app.lookup("txa_print");
				var text = name + " : " + value + "\n";
				textarea.value += text;
			}
			
			/*
			 * 콤보 박스에서 before-selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장되기 전에 발생하는 이벤트. 다음 이벤트로 selection-change가 발생합니다.
			 */
			function onCheckComboBeforeSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var checkCombo = e.control;
				print("before-selection-change", checkCombo.value);
			}
			
			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCheckComboSelectionChange(/* cpr.events.CSelectionEvent */ e){
				/** 
				 * @type cpr.controls.ComboBox
				 */
				var checkCombo = e.control;
				print("selection-change", checkCombo.value);
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			app.declareBindableAppProperty("explain", null);
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "column11", "value": "column11"},
					{"label": "column12", "value": "column12"},
					{"label": "column13", "value": "column13"},
					{"label": "column14", "value": "column14"}
				]
			});
			app.register(dataSet_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 800px) and (max-width: 1023px)", "new-screen");
			app.supportMedia("all and (min-width: 500px) and (max-width: 799px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.pagetitle2();
			userDefinedControl_1.bind("title").toAppProperty("title");
			userDefinedControl_1.bind("explain").toAppProperty("explain");
			container.addChild(userDefinedControl_1, {
				"top": "10px",
				"right": "10px",
				"left": "10px",
				"height": "50px"
			});
			
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.setColumns(["1fr", "200px", "2fr"]);
			formLayout_1.setRows(["25px", "2fr", "1fr"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var comboBox_1 = new cpr.controls.ComboBox("checkCombo");
				comboBox_1.multiple = true;
				(function(comboBox_1){
					comboBox_1.addItem(new cpr.controls.Item("label1", "value1"));
					comboBox_1.addItem(new cpr.controls.Item("label2", "value2"));
					comboBox_1.addItem(new cpr.controls.Item("label3", "value3"));
					comboBox_1.addItem(new cpr.controls.Item("label4", "value4"));
					comboBox_1.addItem(new cpr.controls.Item("label5", "value5"));
					comboBox_1.addItem(new cpr.controls.Item("label6", "value6"));
					comboBox_1.setItemSet(app.lookup("ds1"), {
						"label": "label",
						"value": "value"
					})
				})(comboBox_1);
				if(typeof onCheckComboBeforeSelectionChange == "function") {
					comboBox_1.addEventListener("before-selection-change", onCheckComboBeforeSelectionChange);
				}
				if(typeof onCheckComboSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onCheckComboSelectionChange);
				}
				container.addChild(comboBox_1, {
					"colIndex": 1,
					"rowIndex": 0
				});
				var textArea_1 = new cpr.controls.TextArea("txa_print");
				container.addChild(textArea_1, {
					"colIndex": 0,
					"rowIndex": 1,
					"colSpan": 2,
					"rowSpan": 2
				});
				var group_2 = new cpr.controls.Container();
				// Layout
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.setColumns(["70px", "1fr", "150px", "1fr"]);
				formLayout_2.setRows(["25px", "25px", "25px", "25px", "25px", "25px", "25px", "1fr"]);
				group_2.setLayout(formLayout_2);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "속성 값 변경";
					output_1.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 2,
						"rowSpan": 1
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "multiple";
					output_2.style.css({
						"text-align" : "left"
					});
					container.addChild(output_2, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var checkBox_1 = new cpr.controls.CheckBox("cbx_multiple");
					checkBox_1.value = "true";
					checkBox_1.falseValue = "false";
					checkBox_1.text = "다중 선택";
					if(typeof onCbx_multipleValueChange == "function") {
						checkBox_1.addEventListener("value-change", onCbx_multipleValueChange);
					}
					container.addChild(checkBox_1, {
						"colIndex": 1,
						"rowIndex": 1
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "displayExp";
					output_3.style.css({
						"text-align" : "left"
					});
					container.addChild(output_3, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var inputBox_1 = new cpr.controls.InputBox("ipb_displayExp");
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 2
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "label 표기 방식 설정";
					if(typeof onButtonClick == "function") {
						button_1.addEventListener("click", onButtonClick);
					}
					container.addChild(button_1, {
						"colIndex": 2,
						"rowIndex": 2
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "delimiter";
					output_4.style.css({
						"text-align" : "left"
					});
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 3
					});
					var inputBox_2 = new cpr.controls.InputBox("ipb_delimiter");
					container.addChild(inputBox_2, {
						"colIndex": 1,
						"rowIndex": 3
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "다중 선택 시 구분자 설정";
					if(typeof onButtonClick2 == "function") {
						button_2.addEventListener("click", onButtonClick2);
					}
					container.addChild(button_2, {
						"colIndex": 2,
						"rowIndex": 3
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "콤보 박스의 값 변경";
					output_5.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_5, {
						"colIndex": 0,
						"rowIndex": 5,
						"colSpan": 2,
						"rowSpan": 1
					});
					var output_6 = new cpr.controls.Output();
					output_6.value = "value";
					output_6.style.css({
						"text-align" : "left"
					});
					container.addChild(output_6, {
						"colIndex": 0,
						"rowIndex": 6
					});
					var inputBox_3 = new cpr.controls.InputBox("ipb_value");
					container.addChild(inputBox_3, {
						"colIndex": 1,
						"rowIndex": 6
					});
					var button_3 = new cpr.controls.Button();
					button_3.value = "콤보 박스의 값 변경";
					if(typeof onButtonClick3 == "function") {
						button_3.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_3, {
						"colIndex": 2,
						"rowIndex": 6
					});
				})(group_2);
				container.addChild(group_2, {
					"colIndex": 2,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "70px",
				"right": "10px",
				"bottom": "10px",
				"left": "10px"
			});
		}
	});
	app.title = "checkcombobox";
	cpr.core.Platform.INSTANCE.register(app);
})();
