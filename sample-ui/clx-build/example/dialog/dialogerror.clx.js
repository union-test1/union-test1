/*
 * App URI: example/dialog/dialogerror
 * Source Location: example/dialog/dialogerror.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("example/dialog/dialogerror", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			
			/*
			 * "조회" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				// 데이터를 전송합니다.
				app.lookup("subMain").send();
			}
			
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubMainSubmitSuccess(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var subMain = e.control;
				
				app.lookup("grd1").redraw();
			}
			
			/*
			 * 그리드에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onGrd1Click(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Grid
				 */
				var grd1 = e.control;
				
				// 현재 선택된 row index 배열을 반환합니다.
				var selectedRowIndexes = grd1.getSelectedRowIndices();
				if(Array.isArray(selectedRowIndexes) && selectedRowIndexes.length > 0) {
					
					// 해당하는 row index의 GridRow객체를 반환합니다.
					var gridRow = grd1.getRow(selectedRowIndexes[0]);
					
					// 입력 받은 컬럼명에 해당하는 값을 반환합니다.
					var col1 = gridRow.getValue("column1");
					var col2 = gridRow.getValue("column2");
					var col3 = gridRow.getValue("column3");
					var col4 = gridRow.getValue("column4");
					
					var colValue = col1 + col2 + col3 + col4;
					
					// 앱에서 다이얼로그를 open합니다.
					app.openDialog("example/dialog/dialogerror", {width:500, height:450}, function(/* cpr.controls.Dialog */dlg) {
						dlg.style.overlay.css({
							backgroundColor : "#000000",
							opacity : "0.6"
						});
						
					});
				}
			};
			// End - User Script
			
			// Header
			app.declareBindableAppProperty("title", null);
			app.declareBindableAppProperty("explain", null);
			var dataSet_1 = new cpr.data.DataSet("mainDS");
			dataSet_1.parseData({
				"columns" : [
					{"name": "column1"},
					{"name": "column2"},
					{"name": "column3"},
					{"name": "column4"},
					{"name": "column5"},
					{
						"name": "column6",
						"dataType": "number"
					},
					{
						"name": "column7",
						"dataType": "number"
					},
					{
						"name": "column8",
						"dataType": "number"
					},
					{
						"name": "column9",
						"dataType": "number"
					},
					{
						"name": "column10",
						"dataType": "number"
					},
					{"name": "column11"},
					{"name": "column12"},
					{"name": "column13"},
					{"name": "column14"},
					{"name": "column15"},
					{"name": "column16"},
					{"name": "column17"},
					{"name": "column18"},
					{"name": "column19"},
					{"name": "column20"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("subMain");
			submission_1.async = false;
			submission_1.action = "../example/gridcrud/splitData.do";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSubMainSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubMainSubmitSuccess);
			}
			app.register(submission_1);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
			container.setLayout(responsiveXYLayout_1);
			
			// UI Configuration
			var button_1 = new cpr.controls.Button();
			button_1.value = "조회";
			if(typeof onButtonClick == "function") {
				button_1.addEventListener("click", onButtonClick);
			}
			container.addChild(button_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "70px",
						"right": "10px",
						"width": "100px",
						"height": "20px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"top": "70px",
						"right": "5px",
						"width": "49px",
						"height": "20px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"top": "70px",
						"right": "3px",
						"width": "34px",
						"height": "20px"
					}
				]
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.readOnly = true;
			grid_1.init({
				"dataSet": app.lookup("mainDS"),
				"columns": [
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.text = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.text = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.text = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.text = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.text = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.text = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.text = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.text = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.text = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.text = "column10";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.text = "column11";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 11},
							"configurator": function(cell){
								cell.text = "column12";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 12},
							"configurator": function(cell){
								cell.text = "column13";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 13},
							"configurator": function(cell){
								cell.text = "column14";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 14},
							"configurator": function(cell){
								cell.text = "column15";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 15},
							"configurator": function(cell){
								cell.text = "column16";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 16},
							"configurator": function(cell){
								cell.text = "column17";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 17},
							"configurator": function(cell){
								cell.text = "column18";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 18},
							"configurator": function(cell){
								cell.text = "column19";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 19},
							"configurator": function(cell){
								cell.text = "column20";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "column1";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "column2";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "column3";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "column4";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "column5";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "column6";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "column7";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "column8";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "column9";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.columnName = "column10";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.columnName = "column11";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 11},
							"configurator": function(cell){
								cell.columnName = "column12";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 12},
							"configurator": function(cell){
								cell.columnName = "column13";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 13},
							"configurator": function(cell){
								cell.columnName = "column14";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 14},
							"configurator": function(cell){
								cell.columnName = "column15";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 15},
							"configurator": function(cell){
								cell.columnName = "column16";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 16},
							"configurator": function(cell){
								cell.columnName = "column17";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 17},
							"configurator": function(cell){
								cell.columnName = "column18";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 18},
							"configurator": function(cell){
								cell.columnName = "column19";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 19},
							"configurator": function(cell){
								cell.columnName = "column20";
							}
						}
					]
				}
			});
			if(typeof onGrd1Click == "function") {
				grid_1.addEventListener("click", onGrd1Click);
			}
			container.addChild(grid_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "100px",
						"right": "11px",
						"bottom": "10px",
						"left": "9px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"top": "100px",
						"right": "5px",
						"bottom": "10px",
						"left": "4px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"top": "100px",
						"right": "4px",
						"bottom": "10px",
						"left": "3px"
					}
				]
			});
			
			var userDefinedControl_1 = new udc.pagetitle2();
			userDefinedControl_1.bind("title").toAppProperty("title");
			userDefinedControl_1.bind("explain").toAppProperty("explain");
			container.addChild(userDefinedControl_1, {
				positions: [
					{
						"media": "all and (min-width: 1024px)",
						"top": "10px",
						"right": "10px",
						"left": "10px",
						"height": "50px"
					}, 
					{
						"media": "all and (min-width: 500px) and (max-width: 1023px)",
						"hidden": false,
						"top": "10px",
						"right": "5px",
						"left": "5px",
						"height": "50px"
					}, 
					{
						"media": "all and (max-width: 499px)",
						"hidden": false,
						"top": "10px",
						"right": "3px",
						"left": "3px",
						"height": "50px"
					}
				]
			});
		}
	});
	app.title = "Dialog 테스트 앱";
	cpr.core.Platform.INSTANCE.register(app);
})();
